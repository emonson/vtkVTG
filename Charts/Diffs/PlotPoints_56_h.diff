--- /Users/emonson/Programming/VTK_5.6/Charts/vtkPlotPoints.h	2009-12-01 11:51:15.000000000 -0500
+++ vtkMyPlotPoints.h	2010-06-30 09:45:39.000000000 -0400
@@ -1,7 +1,7 @@
 /*=========================================================================
 
   Program:   Visualization Toolkit
-  Module:    $RCSfile: vtkPlotPoints.h,v $
+  Module:    vtkMyPlotPoints.h
 
   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
   All rights reserved.
@@ -13,62 +13,178 @@
 
 =========================================================================*/
 
-// .NAME vtkPlotPoints - Class for drawing an XY plot given two columns from a
+// .NAME vtkMyPlotPoints - Class for drawing an XY plot given two columns from a
 // vtkTable.
 //
 // .SECTION Description
 //
 
-#ifndef __vtkPlotPoints_h
-#define __vtkPlotPoints_h
+#ifndef __vtkMyPlotPoints_h
+#define __vtkMyPlotPoints_h
 
 #include "vtkPlot.h"
+#include "vtkSmartPointer.h"
+// #include "vtkVector.h"
 
 class vtkContext2D;
 class vtkTable;
 class vtkPoints2D;
 class vtkStdString;
+class vtkImageData;
+class vtkMatrix4x4;
+class vtkImageReslice;
+class vtkLookupTable;
+class vtkImageMapToColors;
+class vtkVector3f;
 
-class VTK_CHARTS_EXPORT vtkPlotPoints : public vtkPlot
+class VTK_CHARTS_EXPORT vtkMyPlotPoints : public vtkPlot
 {
 public:
-  vtkTypeRevisionMacro(vtkPlotPoints, vtkPlot);
+  vtkTypeMacro(vtkMyPlotPoints, vtkPlot);
   virtual void PrintSelf(ostream &os, vtkIndent indent);
 
   // Description:
   // Creates a 2D Chart object.
-  static vtkPlotPoints *New();
+  static vtkMyPlotPoints *New();
+
+  // Description:
+  // Perform any updates to the item that may be necessary before rendering.
+  // The scene should take care of calling this on all items before their
+  // Paint function is invoked.
+  virtual void Update();
 
   // Description:
   // Paint event for the XY plot, called whenever the chart needs to be drawn
   virtual bool Paint(vtkContext2D *painter);
 
   // Description:
+  // Paint legend event for the XY plot, called whenever the legend needs the
+  // plot items symbol/mark/line drawn. A rect is supplied with the lower left
+  // corner of the rect (elements 0 and 1) and with width x height (elements 2
+  // and 3). The plot can choose how to fill the space supplied.
+  virtual bool PaintLegend(vtkContext2D *painter, float rect[4]);
+
+  // Description:
   // Get the bounds for this mapper as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
   virtual void GetBounds(double bounds[4]);
 
+  // Description
+  // ImageData associated with plot, which the tooltip in the chartXY will get
+  // a slice of to display when hovering over points (needs to be just 2d)
+  virtual void SetTooltipImageStack(vtkImageData*);
+  virtual int GetNumberOfImages();
+  virtual vtkImageData* GetImageAtIndex(int imageId);
+  
+  
+//BTX
+  // Description:
+  // Function to query a plot for the nearest point to the specified coordinate.
+  // This version returns the index of the point as a float in the .Z() vector3f coord.
+  virtual int GetNearestPoint(const vtkVector2f& point,
+                               const vtkVector2f& tolerance,
+                               vtkVector2f* location);
+
+  // Description:
+  // Select all points in the specified rectangle.
+  virtual bool SelectPoints(const vtkVector2f& min, const vtkVector2f& max);
+
+  // Description:
+  // Set the list of ids for highlighting (back from outside plot).
+  virtual void SetHighlightSelection(vtkIdTypeArray *id);
+  vtkGetObjectMacro(HighlightSelection, vtkIdTypeArray);
+
+  // Description:
+  // Enum containing various marker styles that can be used in a plot.
+  enum {
+    NONE = 0,
+    CROSS,
+    PLUS,
+    SQUARE,
+    CIRCLE,
+    DIAMOND
+  };
+//ETX
+
+  // Description:
+  // Get/set the marker style that should be used. The default is none, the enum
+  // in this class is used as a parameter.
+  vtkGetMacro(MarkerStyle, int);
+  vtkSetMacro(MarkerStyle, int);
+
 //BTX
 protected:
-  vtkPlotPoints();
-  ~vtkPlotPoints();
+  vtkMyPlotPoints();
+  ~vtkMyPlotPoints();
+
+  // Description:
+  // Generate the requested symbol for the plot
+  void GeneraterMarker(int width, bool highlight = false);
 
   // Description:
   // Update the table cache.
   bool UpdateTableCache(vtkTable *table);
 
   // Description:
+  // Handle calculating the log of the x or y series if necessary. Should be
+  // called by UpdateTableCache once the data has been updated in Points.
+  void CalculateLogSeries();
+
+  // Description:
+  // Find all of the "bad points" in the series. This is mainly used to cache
+  // bad points for performance reasons, but could also be used plot the bad
+  // points in the future.
+  void FindBadPoints();
+
+  // Description:
+  // Calculate the bounds of the plot, ignoring the bad points.
+  void CalculateBounds(double bounds[4]);
+
+  // Description:
   // Store a well packed set of XY coordinates for this data series.
   vtkPoints2D *Points;
 
   // Description:
+  // Sorted points, used when searching for the nearest point.
+  class VectorPIMPL3;
+  VectorPIMPL3* Sorted;
+
+  // Description:
+  // An array containing the indices of all the "bad points", meaning any x, y
+  // pair that has an infinity, -infinity or not a number value.
+  vtkIdTypeArray* BadPoints;
+
+  // Description:
   // The point cache is marked dirty until it has been initialized.
   vtkTimeStamp BuildTime;
+  
+  // Description
+  // ImageData associated with plot, which the tooltip in the chartXY will get
+  // a slice of to display when hovering over points
+  vtkImageData* TooltipImageStack;
+  int NumImages;
+
+  // Description:
+  // The marker style that should be used
+  int MarkerStyle;
+  vtkImageData* Marker;
+  vtkImageData* SelectionMarker;
+
+  // Description:
+  // Selected indices coming back from outside the chart this plot is associated with.
+  vtkIdTypeArray *HighlightSelection;
+
+  bool LogX, LogY;
+  
+  vtkSmartPointer<vtkMatrix4x4> resliceAxes;
+  vtkSmartPointer<vtkImageReslice> reslice;
+  vtkSmartPointer<vtkLookupTable> lut;
+  vtkSmartPointer<vtkImageMapToColors> color;
 
 private:
-  vtkPlotPoints(const vtkPlotPoints &); // Not implemented.
-  void operator=(const vtkPlotPoints &); // Not implemented.
+  vtkMyPlotPoints(const vtkMyPlotPoints &); // Not implemented.
+  void operator=(const vtkMyPlotPoints &); // Not implemented.
 
 //ETX
 };
 
-#endif //__vtkPlotPoints_h
+#endif //__vtkMyPlotPoints_h
