--- /Users/emonson/Programming/VTK_git/VTK/Charts/vtkPlotParallelCoordinates.cxx	2012-05-15 09:39:26.000000000 -0400
+++ ./vtkMyPlotParallelCoordinates.cxx	2011-12-08 14:58:23.000000000 -0500
@@ -1,7 +1,7 @@
 /*=========================================================================
 
   Program:   Visualization Toolkit
-  Module:    vtkPlotParallelCoordinates.cxx
+  Module:    vtkMyPlotParallelCoordinates.cxx
 
   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
   All rights reserved.
@@ -13,10 +13,11 @@
 
 =========================================================================*/
 
-#include "vtkPlotParallelCoordinates.h"
+#include "vtkMyPlotParallelCoordinates.h"
+#include "vtkMyChartParallelCoordinates.h"
 
-#include "vtkChartParallelCoordinates.h"
 #include "vtkContext2D.h"
+#include "vtkColor.h"
 #include "vtkAxis.h"
 #include "vtkPen.h"
 #include "vtkFloatArray.h"
@@ -25,9 +26,11 @@
 #include "vtkTransform2D.h"
 #include "vtkContextDevice2D.h"
 #include "vtkContextMapper2D.h"
+#include "vtkPoints2D.h"
 #include "vtkTable.h"
 #include "vtkDataArray.h"
 #include "vtkIdTypeArray.h"
+#include "vtkImageData.h"
 #include "vtkStringArray.h"
 #include "vtkTimeStamp.h"
 #include "vtkInformation.h"
@@ -40,11 +43,11 @@
 
 #include "vtkObjectFactory.h"
 
-#include <vector>
-#include <algorithm>
+#include "vtkstd/vector"
+#include "vtkstd/algorithm"
 
-class vtkPlotParallelCoordinates::Private :
-    public std::vector< std::vector<float> >
+class vtkMyPlotParallelCoordinates::Private :
+    public vtkstd::vector< vtkstd::vector<float> >
 {
 public:
   Private()
@@ -52,29 +55,57 @@
     this->SelectionInitialized = false;
   }
 
-  std::vector<float> AxisPos;
+  vtkstd::vector<float> AxisPos;
   bool SelectionInitialized;
 };
 
 
 //-----------------------------------------------------------------------------
-vtkStandardNewMacro(vtkPlotParallelCoordinates);
+vtkStandardNewMacro(vtkMyPlotParallelCoordinates);
 
 //-----------------------------------------------------------------------------
-vtkPlotParallelCoordinates::vtkPlotParallelCoordinates()
+vtkCxxSetObjectMacro(vtkMyPlotParallelCoordinates, HighlightSelection, vtkIdTypeArray);
+
+//-----------------------------------------------------------------------------
+vtkMyPlotParallelCoordinates::vtkMyPlotParallelCoordinates()
 {
-  this->Storage = new vtkPlotParallelCoordinates::Private;
+  this->Points = NULL;
+  this->Storage = new vtkMyPlotParallelCoordinates::Private;
+  this->MarkerStyle = vtkMyPlotParallelCoordinates::CIRCLE;
+  this->Parent = NULL;
   this->Pen->SetColor(0, 0, 0, 25);
+  this->Marker = NULL;
+  this->HighlightMarker = NULL;
+  this->HighlightSelection = NULL;
 
   this->LookupTable = 0;
   this->Colors = 0;
   this->ScalarVisibility = 0;
+  strcpy(this->ColorArrayName, "");
 }
 
 //-----------------------------------------------------------------------------
-vtkPlotParallelCoordinates::~vtkPlotParallelCoordinates()
+vtkMyPlotParallelCoordinates::~vtkMyPlotParallelCoordinates()
 {
+  if (this->Points)
+    {
+    this->Points->Delete();
+    this->Points = NULL;
+    }
   delete this->Storage;
+  if (this->Marker)
+    {
+    this->Marker->Delete();
+    }
+  if (this->HighlightMarker)
+    {
+    this->HighlightMarker->Delete();
+    }
+  if (this->HighlightSelection)
+    {
+    this->HighlightSelection->Delete();
+    this->HighlightSelection = NULL;
+    }
   if (this->LookupTable)
     {
     this->LookupTable->UnRegister(this);
@@ -86,7 +117,7 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::Update()
+void vtkMyPlotParallelCoordinates::Update()
 {
   if (!this->Visible)
     {
@@ -104,16 +135,40 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkPlotParallelCoordinates::Paint(vtkContext2D *painter)
+bool vtkMyPlotParallelCoordinates::Paint(vtkContext2D *painter)
 {
   // This is where everything should be drawn, or dispatched to other methods.
-  vtkDebugMacro(<< "Paint event called in vtkPlotParallelCoordinates.");
+  vtkDebugMacro(<< "Paint event called in vtkMyPlotParallelCoordinates.");
 
   if (!this->Visible)
     {
     return false;
     }
 
+  float width = this->Pen->GetWidth() * 2.0;
+  if (width < 1.5)
+    {
+    width = 1.5;
+    }
+
+  // Now to plot the points
+  if (this->Points)
+    {
+    painter->ApplyPen(this->Pen);
+    painter->DrawPoly(this->Points);
+    painter->GetPen()->SetLineType(vtkPen::SOLID_LINE);
+    }
+
+  // If there is a marker style, then draw the marker for each point too
+  if (this->MarkerStyle && this->Points)
+    {
+    this->GeneraterMarker(vtkContext2D::FloatToInt(width));
+    painter->ApplyPen(this->GetPen());
+    painter->ApplyBrush(this->GetBrush());
+    painter->GetPen()->SetWidth(width);
+    painter->DrawPointSprites(this->Marker, this->Points);
+    }
+
   painter->ApplyPen(this->Pen);
 
   if (this->Storage->size() == 0)
@@ -124,15 +179,13 @@
   size_t cols = this->Storage->size();
   size_t rows = this->Storage->at(0).size();
   vtkVector2f* line = new vtkVector2f[cols];
+  vtkColor4ub* colors = new vtkColor4ub[cols];
 
   // Update the axis positions
-  vtkChartParallelCoordinates *parent =
-      vtkChartParallelCoordinates::SafeDownCast(this->Parent);
-
   for (size_t i = 0; i < cols; ++i)
     {
-    this->Storage->AxisPos[i] = parent->GetAxis(int(i)) ?
-                                parent->GetAxis(int(i))->GetPoint1()[0] :
+    this->Storage->AxisPos[i] = this->Parent->GetAxis(int(i)) ?
+                                this->Parent->GetAxis(int(i))->GetPoint1()[0] :
                                 0;
     }
 
@@ -148,23 +201,41 @@
       }
     }
 
+  // Draw all of the points
+  // TODO: This needs to be updated for colored markers
+  this->GeneraterMarker(vtkContext2D::FloatToInt(width));
+  painter->ApplyPen(this->GetPen());
+  painter->ApplyBrush(this->GetBrush());
+  painter->GetPen()->SetWidth(width);
+  painter->GetPen()->SetOpacity(180);
+  for (size_t i = 0; i < rows; ++i)
+    {
+    for (size_t j = 0; j < cols; ++j)
+      {
+      line[j].Set(this->Storage->AxisPos[j], (*this->Storage)[j][i]);
+      }
+    painter->DrawPointSprites(this->Marker, line[0].GetData(), static_cast<int>(cols));
+    }
+
   // Draw all of the lines
   painter->ApplyPen(this->Pen);
-  int nc_comps(0);
+  int nc_comps;
   if (this->ScalarVisibility && this->Colors)
     {
     nc_comps = static_cast<int>(this->Colors->GetNumberOfComponents());
     }
-  if (this->ScalarVisibility && this->Colors && nc_comps == 4)
+  if (this->ScalarVisibility && this->Colors && (nc_comps == 4))
     {
     for (size_t i = 0, nc = 0; i < rows; ++i, nc += nc_comps)
       {
       for (size_t j = 0; j < cols; ++j)
         {
         line[j].Set(this->Storage->AxisPos[j], (*this->Storage)[j][i]);
+        colors[j].Set(*this->Colors->GetPointer(nc), *this->Colors->GetPointer(nc+1),
+                      *this->Colors->GetPointer(nc+2), *this->Colors->GetPointer(nc+3));
         }
-      painter->GetPen()->SetColor(this->Colors->GetPointer(nc));
-      painter->DrawPoly(line[0].GetData(), static_cast<int>(cols));
+      painter->DrawPoly(line[0].GetData(), static_cast<int>(cols),
+                        colors[0].GetData(), nc_comps);
       }
     }
   else
@@ -182,7 +253,7 @@
   // Now draw the selected lines
   if (this->Selection)
     {
-    painter->GetPen()->SetColor(255, 0, 0, 100);
+    painter->GetPen()->SetColor(255, 0, 0, 154);
     for (vtkIdType i = 0; i < this->Selection->GetNumberOfTuples(); ++i)
       {
       for (size_t j = 0; j < cols; ++j)
@@ -194,29 +265,248 @@
       }
     }
 
+  // Now draw any highlight selected lines (coming from outside the corresponding chart)
+  if (this->HighlightSelection)
+    {
+    painter->GetPen()->SetColor(0, 128, 255, 154);
+    painter->GetPen()->SetWidth(width*1.15);
+    for (vtkIdType i = 0; i < this->HighlightSelection->GetNumberOfTuples(); ++i)
+      {
+      for (size_t j = 0; j < cols; ++j)
+        {
+        this->HighlightSelection->GetTupleValue(i, &id);
+        line[j].Set(this->Storage->AxisPos[j], (*this->Storage)[j][id]);
+        }
+      painter->DrawPoly(line[0].GetData(), static_cast<int>(cols));
+      }
+    }
+
   delete[] line;
+  delete[] colors;
 
   return true;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkPlotParallelCoordinates::PaintLegend(vtkContext2D *painter,
-                                             const vtkRectf& rect, int)
+void vtkMyPlotParallelCoordinates::GeneraterMarker(int width, bool highlight)
+{
+  // Set up the image data, if highlight then the mark shape is different
+  vtkImageData *data = 0;
+
+  if (!highlight)
+    {
+    if (!this->Marker)
+      {
+      this->Marker = vtkImageData::New();
+      this->Marker->SetScalarTypeToUnsignedChar();
+      this->Marker->SetNumberOfScalarComponents(4);
+      }
+    else
+      {
+      if (this->Marker->GetMTime() >= this->GetMTime() &&
+          this->Marker->GetMTime() >= this->Pen->GetMTime())
+        {
+        // Marker already generated, no need to do this again.
+        return;
+        }
+      }
+    data = this->Marker;
+    }
+  else
+    {
+    if (!this->HighlightMarker)
+      {
+      this->HighlightMarker = vtkImageData::New();
+      this->HighlightMarker->SetScalarTypeToUnsignedChar();
+      this->HighlightMarker->SetNumberOfScalarComponents(4);
+      data = this->HighlightMarker;
+      }
+    else
+      {
+      if (this->HighlightMarker->GetMTime() >= this->GetMTime() &&
+          this->HighlightMarker->GetMTime() >= this->Pen->GetMTime())
+        {
+        // Marker already generated, no need to do this again.
+        return;
+        }
+      }
+    data = this->HighlightMarker;
+    }
+
+  data->SetExtent(0, width-1, 0, width-1, 0, 0);
+  data->AllocateScalars();
+  unsigned char* image =
+      static_cast<unsigned char*>(data->GetScalarPointer());
+
+  // Generate the marker image at the required size
+  switch (this->MarkerStyle)
+    {
+    case vtkMyPlotParallelCoordinates::CROSS:
+      {
+      for (int i = 0; i < width; ++i)
+        {
+        for (int j = 0; j < width; ++j)
+          {
+          unsigned char color = 0;
+
+          if (highlight)
+            {
+            if ((i >= j-1 && i <= j+1) || (i >= width-j-1 && i <= width-j+1))
+              {
+              color = 255;
+              }
+            }
+          else
+            {
+            if (i == j || i == width-j)
+              {
+              color = 255;
+              }
+            }
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      break;
+      }
+    case vtkMyPlotParallelCoordinates::PLUS:
+      {
+      int x = width / 2;
+      int y = width / 2;
+      for (int i = 0; i < width; ++i)
+        {
+        for (int j = 0; j < width; ++j)
+          {
+          unsigned char color = 0;
+          if (i == x || j == y)
+            {
+            color = 255;
+            }
+          if (highlight)
+            {
+            if (i == x-1 || i == x+1 || j == y-1 || j == y+1)
+              {
+              color = 255;
+              }
+            }
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      break;
+      }
+    case vtkMyPlotParallelCoordinates::SQUARE:
+      {
+      for (int i = 0; i < width; ++i)
+        {
+        for (int j = 0; j < width; ++j)
+          {
+          unsigned char color = 255;
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      break;
+      }
+    case vtkMyPlotParallelCoordinates::CIRCLE:
+      {
+      double c = width/2.0;
+      for (int i = 0; i < width; ++i)
+        {
+        double dx2 = (i - c)*(i-c);
+        for (int j = 0; j < width; ++j)
+          {
+          double dy2 = (j - c)*(j - c);
+          unsigned char color = 0;
+          if (sqrt(dx2 + dy2) < c)
+            {
+            color = 255;
+            }
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      break;
+      }
+    case vtkMyPlotParallelCoordinates::DIAMOND:
+      {
+      int c = width/2;
+      for (int i = 0; i < width; ++i)
+        {
+        int dx = i-c > 0 ? i-c : c-i;
+        for (int j = 0; j < width; ++j)
+          {
+          int dy = j-c > 0 ? j-c : c-j;
+          unsigned char color = 0;
+          if (c-dx >= dy)
+            {
+            color = 255;
+            }
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      break;
+      }
+    default:
+      {
+      int x = width / 2;
+      int y = width / 2;
+      for (int i = 0; i < width; ++i)
+        {
+        for (int j = 0; j < width; ++j)
+          {
+          unsigned char color = 0;
+          if (i == x || j == y)
+            {
+            color = 255;
+            }
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      }
+    }
+}
+
+
+//-----------------------------------------------------------------------------
+bool vtkMyPlotParallelCoordinates::PaintLegend(vtkContext2D *painter, float rect[4])
 {
   painter->ApplyPen(this->Pen);
-  painter->DrawLine(rect[0]          , rect[1] + 0.5 * rect[3],
-                    rect[0] + rect[2], rect[1] + 0.5 * rect[3]);
+  painter->DrawLine(rect[0], rect[1]+0.5*rect[3],
+                    rect[0]+rect[2], rect[1]+0.5*rect[3]);
   return true;
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::GetBounds(double *)
+void vtkMyPlotParallelCoordinates::GetBounds(double *)
 {
 
 }
 
 //-----------------------------------------------------------------------------
-bool vtkPlotParallelCoordinates::SetSelectionRange(int axis, float low,
+vtkIdType vtkMyPlotParallelCoordinates::GetNearestPoint(const vtkVector2f& ,
+                                  const vtkVector2f& ,
+                                  vtkVector2f* )
+{
+  return -1;
+}
+
+//-----------------------------------------------------------------------------
+void vtkMyPlotParallelCoordinates::SetParent(vtkMyChartParallelCoordinates* parent)
+{
+  this->Parent = parent;
+}
+
+//-----------------------------------------------------------------------------
+bool vtkMyPlotParallelCoordinates::SetSelectionRange(int axis, float low,
                                                    float high)
 {
   if (!this->Selection)
@@ -227,7 +517,7 @@
     {
     // Further refine the selection that has already been made
     vtkIdTypeArray *array = vtkIdTypeArray::New();
-    std::vector<float>& col = this->Storage->at(axis);
+    vtkstd::vector<float>& col = this->Storage->at(axis);
     for (vtkIdType i = 0; i < this->Selection->GetNumberOfTuples(); ++i)
       {
       vtkIdType id = 0;
@@ -244,7 +534,7 @@
   else
     {
     // First run - ensure the selection list is empty and build it up
-    std::vector<float>& col = this->Storage->at(axis);
+    vtkstd::vector<float>& col = this->Storage->at(axis);
     for (size_t i = 0; i < col.size(); ++i)
       {
       if (col[i] >= low && col[i] <= high)
@@ -259,7 +549,7 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkPlotParallelCoordinates::ResetSelectionRange()
+bool vtkMyPlotParallelCoordinates::ResetSelectionRange()
 {
   this->Storage->SelectionInitialized = false;
   if (this->Selection)
@@ -270,56 +560,48 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::SetInput(vtkTable* table)
+void vtkMyPlotParallelCoordinates::SetInput(vtkTable* table)
 {
-  if (table == this->Data->GetInput() && (!table ||
-                                          table->GetMTime() < this->BuildTime))
+  if (table == this->Data->GetInput())
     {
     return;
     }
 
-  bool updateVisibility = table != this->Data->GetInput();
   this->vtkPlot::SetInput(table);
-  vtkChartParallelCoordinates *parent =
-      vtkChartParallelCoordinates::SafeDownCast(this->Parent);
-
-  if (parent && table && updateVisibility)
+  if (this->Parent && table)
     {
-    parent->SetColumnVisibilityAll(false);
+    // this->Parent->SetAllColumnsInvisible();
     // By default make the first 10 columns visible in a plot.
-    for (vtkIdType i = 0; i < table->GetNumberOfColumns() && i < 10; ++i)
-      {
-      parent->SetColumnVisibility(table->GetColumnName(i), true);
-      }
+//     for (vtkIdType i = 0; i < table->GetNumberOfColumns() && i < 10; ++i)
+//       {
+//       this->Parent->SetColumnVisibility(table->GetColumnName(i), true);
+//       }
     }
-  else if (parent && updateVisibility)
+  if (this->Parent && !table)
     {
     // No table, therefore no visible columns
-    parent->GetVisibleColumns()->SetNumberOfTuples(0);
+    this->Parent->GetVisibleColumns()->SetNumberOfTuples(0);
     }
 }
 
 //-----------------------------------------------------------------------------
-bool vtkPlotParallelCoordinates::UpdateTableCache(vtkTable *table)
+bool vtkMyPlotParallelCoordinates::UpdateTableCache(vtkTable *table)
 {
   // Each axis is a column in our storage array, they are scaled from 0.0 to 1.0
-  vtkChartParallelCoordinates *parent =
-      vtkChartParallelCoordinates::SafeDownCast(this->Parent);
-  if (!parent || !table || table->GetNumberOfColumns() == 0)
+  if (!this->Parent || !table || table->GetNumberOfColumns() == 0)
     {
     return false;
     }
 
-  vtkStringArray* cols = parent->GetVisibleColumns();
-
+  vtkStringArray* cols = this->Parent->GetVisibleColumns();
   this->Storage->resize(cols->GetNumberOfTuples());
   this->Storage->AxisPos.resize(cols->GetNumberOfTuples());
   vtkIdType rows = table->GetNumberOfRows();
 
   for (vtkIdType i = 0; i < cols->GetNumberOfTuples(); ++i)
     {
-    std::vector<float>& col = this->Storage->at(i);
-    vtkAxis* axis = parent->GetAxis(i);
+    vtkstd::vector<float>& col = this->Storage->at(i);
+    vtkAxis* axis = this->Parent->GetAxis(i);
     col.resize(rows);
     vtkSmartPointer<vtkDataArray> data =
         vtkDataArray::SafeDownCast(table->GetColumnByName(cols->GetValue(i)));
@@ -385,7 +667,7 @@
     }
 
   // Additions for color mapping
-  if (this->ScalarVisibility && !this->ColorArrayName.empty())
+  if (this->ScalarVisibility && (this->ColorArrayName[0] != 0))
     {
     vtkDataArray* c =
       vtkDataArray::SafeDownCast(table->GetColumnByName(this->ColorArrayName));
@@ -413,7 +695,7 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::SetLookupTable(vtkScalarsToColors *lut)
+void vtkMyPlotParallelCoordinates::SetLookupTable(vtkScalarsToColors *lut)
 {
   if ( this->LookupTable != lut )
     {
@@ -431,7 +713,7 @@
 }
 
 //-----------------------------------------------------------------------------
-vtkScalarsToColors *vtkPlotParallelCoordinates::GetLookupTable()
+vtkScalarsToColors *vtkMyPlotParallelCoordinates::GetLookupTable()
 {
   if ( this->LookupTable == 0 )
     {
@@ -441,7 +723,7 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::CreateDefaultLookupTable()
+void vtkMyPlotParallelCoordinates::CreateDefaultLookupTable()
 {
   if ( this->LookupTable)
     {
@@ -454,7 +736,7 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::SelectColorArray(const vtkStdString &arrayName)
+void vtkMyPlotParallelCoordinates::SelectColorArray(const char *arrayName)
 {
   vtkTable *table = this->Data->GetInput();
   if (!table)
@@ -462,33 +744,28 @@
     vtkDebugMacro(<< "SelectColorArray called with no input table set.");
     return;
     }
-  if (this->ColorArrayName == arrayName)
+  if (strcmp(this->ColorArrayName, arrayName) == 0)
     {
     return;
     }
   for (vtkIdType c = 0; c < table->GetNumberOfColumns(); ++c)
     {
-    if (table->GetColumnName(c) == arrayName)
+    const char *name = table->GetColumnName(c);
+    if (strcmp(name, arrayName) == 0)
       {
-      this->ColorArrayName = arrayName;
+      strcpy(this->ColorArrayName, arrayName);
       this->Modified();
       return;
       }
     }
   vtkDebugMacro(<< "SelectColorArray called with invalid column name.");
-  this->ColorArrayName = "";
+  strcpy(this->ColorArrayName, "");
   this->Modified();
   return;
 }
 
 //-----------------------------------------------------------------------------
-vtkStdString vtkPlotParallelCoordinates::GetColorArrayName()
-{
-  return this->ColorArrayName;
-}
-
-//-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::SelectColorArray(vtkIdType arrayNum)
+void vtkMyPlotParallelCoordinates::SelectColorArray(vtkIdType arrayNum)
 {
   vtkTable *table = this->Data->GetInput();
   if (!table)
@@ -505,20 +782,21 @@
     }
   else
     {
-    if (this->ColorArrayName == table->GetColumnName(arrayNum))
+    const char *arrayName = table->GetColumnName(arrayNum);
+    if (strcmp(this->ColorArrayName, arrayName) == 0)
       {
       return;
       }
     else
       {
-      this->ColorArrayName = table->GetColumnName(arrayNum);
+      strcpy(this->ColorArrayName, arrayName);
       this->Modified();
       }
     }
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::PrintSelf(ostream &os, vtkIndent indent)
+void vtkMyPlotParallelCoordinates::PrintSelf(ostream &os, vtkIndent indent)
 {
   this->Superclass::PrintSelf(os, indent);
 }
