--- /Users/emonson/Programming/VTK_git/VTK/Charts/vtkPlotParallelCoordinates.cxx	2010-06-30 10:56:13.000000000 -0400
+++ vtkMyPlotParallelCoordinates.cxx	2010-06-30 11:51:24.000000000 -0400
@@ -1,7 +1,7 @@
 /*=========================================================================
 
   Program:   Visualization Toolkit
-  Module:    vtkPlotParallelCoordinates.cxx
+  Module:    vtkMyPlotParallelCoordinates.cxx
 
   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
   All rights reserved.
@@ -13,9 +13,9 @@
 
 =========================================================================*/
 
-#include "vtkPlotParallelCoordinates.h"
+#include "vtkMyPlotParallelCoordinates.h"
+#include "vtkMyChartParallelCoordinates.h"
 
-#include "vtkChartParallelCoordinates.h"
 #include "vtkContext2D.h"
 #include "vtkAxis.h"
 #include "vtkPen.h"
@@ -29,6 +29,7 @@
 #include "vtkTable.h"
 #include "vtkDataArray.h"
 #include "vtkIdTypeArray.h"
+#include "vtkImageData.h"
 #include "vtkStringArray.h"
 #include "vtkTimeStamp.h"
 #include "vtkInformation.h"
@@ -42,7 +43,7 @@
 #include "vtkstd/vector"
 #include "vtkstd/algorithm"
 
-class vtkPlotParallelCoordinates::Private :
+class vtkMyPlotParallelCoordinates::Private :
     public vtkstd::vector< vtkstd::vector<float> >
 {
 public:
@@ -57,19 +58,26 @@
 
 
 //-----------------------------------------------------------------------------
-vtkStandardNewMacro(vtkPlotParallelCoordinates);
+vtkStandardNewMacro(vtkMyPlotParallelCoordinates);
 
 //-----------------------------------------------------------------------------
-vtkPlotParallelCoordinates::vtkPlotParallelCoordinates()
+vtkCxxSetObjectMacro(vtkMyPlotParallelCoordinates, HighlightSelection, vtkIdTypeArray);
+
+//-----------------------------------------------------------------------------
+vtkMyPlotParallelCoordinates::vtkMyPlotParallelCoordinates()
 {
   this->Points = NULL;
-  this->Storage = new vtkPlotParallelCoordinates::Private;
+  this->Storage = new vtkMyPlotParallelCoordinates::Private;
+  this->MarkerStyle = vtkMyPlotParallelCoordinates::CIRCLE;
   this->Parent = NULL;
   this->Pen->SetColor(0, 0, 0, 25);
+  this->Marker = NULL;
+  this->HighlightMarker = NULL;
+  this->HighlightSelection = NULL;
 }
 
 //-----------------------------------------------------------------------------
-vtkPlotParallelCoordinates::~vtkPlotParallelCoordinates()
+vtkMyPlotParallelCoordinates::~vtkMyPlotParallelCoordinates()
 {
   if (this->Points)
     {
@@ -77,10 +85,23 @@
     this->Points = NULL;
     }
   delete this->Storage;
+  if (this->Marker)
+    {
+    this->Marker->Delete();
+    }
+  if (this->HighlightMarker)
+    {
+    this->HighlightMarker->Delete();
+    }
+  if (this->HighlightSelection)
+    {
+    this->HighlightSelection->Delete();
+    this->HighlightSelection = NULL;
+    }
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::Update()
+void vtkMyPlotParallelCoordinates::Update()
 {
   if (!this->Visible)
     {
@@ -98,16 +119,22 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkPlotParallelCoordinates::Paint(vtkContext2D *painter)
+bool vtkMyPlotParallelCoordinates::Paint(vtkContext2D *painter)
 {
   // This is where everything should be drawn, or dispatched to other methods.
-  vtkDebugMacro(<< "Paint event called in vtkPlotParallelCoordinates.");
+  vtkDebugMacro(<< "Paint event called in vtkMyPlotParallelCoordinates.");
 
   if (!this->Visible)
     {
     return false;
     }
 
+  float width = this->Pen->GetWidth() * 2.0;
+  if (width < 1.5)
+    {
+    width = 1.5;
+    }
+
   // Now to plot the points
   if (this->Points)
     {
@@ -116,6 +143,15 @@
     painter->GetPen()->SetLineType(vtkPen::SOLID_LINE);
     }
 
+  // If there is a marker style, then draw the marker for each point too
+  if (this->MarkerStyle && this->Points)
+    {
+    this->GeneraterMarker(static_cast<int>(width));
+    painter->ApplyBrush(this->Brush);
+    painter->GetPen()->SetWidth(width);
+    painter->DrawPointSprites(this->Marker, this->Points);
+    }
+
   painter->ApplyPen(this->Pen);
 
   if (this->Storage->size() == 0)
@@ -147,6 +183,20 @@
       }
     }
 
+  // Draw all of the points
+  this->GeneraterMarker(static_cast<int>(width));
+  painter->ApplyBrush(this->Brush);
+  painter->GetPen()->SetWidth(width);
+  painter->GetPen()->SetOpacity(180);
+  for (size_t i = 0; i < rows; ++i)
+    {
+    for (size_t j = 0; j < cols; ++j)
+      {
+      line[j].Set(this->Storage->AxisPos[j], (*this->Storage)[j][i]);
+      }
+    painter->DrawPointSprites(this->Marker, line[0].GetData(), static_cast<int>(cols));
+    }
+
   // Draw all of the lines
   painter->ApplyPen(this->Pen);
   for (size_t i = 0; i < rows; ++i)
@@ -161,7 +211,7 @@
   // Now draw the selected lines
   if (this->Selection)
     {
-    painter->GetPen()->SetColor(255, 0, 0, 100);
+    painter->GetPen()->SetColor(255, 0, 0, 154);
     for (vtkIdType i = 0; i < this->Selection->GetNumberOfTuples(); ++i)
       {
       for (size_t j = 0; j < cols; ++j)
@@ -173,13 +223,218 @@
       }
     }
 
+  // Now draw any highlight selected lines (coming from outside the corresponding chart)
+  if (this->HighlightSelection)
+    {
+    painter->GetPen()->SetColor(0, 128, 255, 154);
+    painter->GetPen()->SetWidth(width*1.15);
+    for (vtkIdType i = 0; i < this->HighlightSelection->GetNumberOfTuples(); ++i)
+      {
+      for (size_t j = 0; j < cols; ++j)
+        {
+        this->HighlightSelection->GetTupleValue(i, &id);
+        line[j].Set(this->Storage->AxisPos[j], (*this->Storage)[j][id]);
+        }
+      painter->DrawPoly(line[0].GetData(), static_cast<int>(cols));
+      }
+    }
+
   delete[] line;
 
   return true;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkPlotParallelCoordinates::PaintLegend(vtkContext2D *painter, float rect[4], int )
+void vtkMyPlotParallelCoordinates::GeneraterMarker(int width, bool highlight)
+{
+  // Set up the image data, if highlight then the mark shape is different
+  vtkImageData *data = 0;
+
+  if (!highlight)
+    {
+    if (!this->Marker)
+      {
+      this->Marker = vtkImageData::New();
+      this->Marker->SetScalarTypeToUnsignedChar();
+      this->Marker->SetNumberOfScalarComponents(4);
+      }
+    else
+      {
+      if (this->Marker->GetMTime() >= this->GetMTime() &&
+          this->Marker->GetMTime() >= this->Pen->GetMTime())
+        {
+        // Marker already generated, no need to do this again.
+        return;
+        }
+      }
+    data = this->Marker;
+    }
+  else
+    {
+    if (!this->HighlightMarker)
+      {
+      this->HighlightMarker = vtkImageData::New();
+      this->HighlightMarker->SetScalarTypeToUnsignedChar();
+      this->HighlightMarker->SetNumberOfScalarComponents(4);
+      data = this->HighlightMarker;
+      }
+    else
+      {
+      if (this->HighlightMarker->GetMTime() >= this->GetMTime() &&
+          this->HighlightMarker->GetMTime() >= this->Pen->GetMTime())
+        {
+        // Marker already generated, no need to do this again.
+        return;
+        }
+      }
+    data = this->HighlightMarker;
+    }
+
+  data->SetExtent(0, width-1, 0, width-1, 0, 0);
+  data->AllocateScalars();
+  unsigned char* image =
+      static_cast<unsigned char*>(data->GetScalarPointer());
+
+  // Generate the marker image at the required size
+  switch (this->MarkerStyle)
+    {
+    case vtkMyPlotParallelCoordinates::CROSS:
+      {
+      for (int i = 0; i < width; ++i)
+        {
+        for (int j = 0; j < width; ++j)
+          {
+          unsigned char color = 0;
+
+          if (highlight)
+            {
+            if ((i >= j-1 && i <= j+1) || (i >= width-j-1 && i <= width-j+1))
+              {
+              color = 255;
+              }
+            }
+          else
+            {
+            if (i == j || i == width-j)
+              {
+              color = 255;
+              }
+            }
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      break;
+      }
+    case vtkMyPlotParallelCoordinates::PLUS:
+      {
+      int x = width / 2;
+      int y = width / 2;
+      for (int i = 0; i < width; ++i)
+        {
+        for (int j = 0; j < width; ++j)
+          {
+          unsigned char color = 0;
+          if (i == x || j == y)
+            {
+            color = 255;
+            }
+          if (highlight)
+            {
+            if (i == x-1 || i == x+1 || j == y-1 || j == y+1)
+              {
+              color = 255;
+              }
+            }
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      break;
+      }
+    case vtkMyPlotParallelCoordinates::SQUARE:
+      {
+      for (int i = 0; i < width; ++i)
+        {
+        for (int j = 0; j < width; ++j)
+          {
+          unsigned char color = 255;
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      break;
+      }
+    case vtkMyPlotParallelCoordinates::CIRCLE:
+      {
+      double c = width/2.0;
+      for (int i = 0; i < width; ++i)
+        {
+        double dx2 = (i - c)*(i-c);
+        for (int j = 0; j < width; ++j)
+          {
+          double dy2 = (j - c)*(j - c);
+          unsigned char color = 0;
+          if (sqrt(dx2 + dy2) < c)
+            {
+            color = 255;
+            }
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      break;
+      }
+    case vtkMyPlotParallelCoordinates::DIAMOND:
+      {
+      int c = width/2;
+      for (int i = 0; i < width; ++i)
+        {
+        int dx = i-c > 0 ? i-c : c-i;
+        for (int j = 0; j < width; ++j)
+          {
+          int dy = j-c > 0 ? j-c : c-j;
+          unsigned char color = 0;
+          if (c-dx >= dy)
+            {
+            color = 255;
+            }
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      break;
+      }
+    default:
+      {
+      int x = width / 2;
+      int y = width / 2;
+      for (int i = 0; i < width; ++i)
+        {
+        for (int j = 0; j < width; ++j)
+          {
+          unsigned char color = 0;
+          if (i == x || j == y)
+            {
+            color = 255;
+            }
+          image[4*width*i + 4*j] = image[4*width*i + 4*j + 1] =
+                                   image[4*width*i + 4*j + 2] = color;
+          image[4*width*i + 4*j + 3] = color;
+          }
+        }
+      }
+    }
+}
+
+
+//-----------------------------------------------------------------------------
+bool vtkMyPlotParallelCoordinates::PaintLegend(vtkContext2D *painter, float rect[4])
 {
   painter->ApplyPen(this->Pen);
   painter->DrawLine(rect[0], rect[1]+0.5*rect[3],
@@ -188,13 +443,13 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::GetBounds(double *)
+void vtkMyPlotParallelCoordinates::GetBounds(double *)
 {
 
 }
 
 //-----------------------------------------------------------------------------
-int vtkPlotParallelCoordinates::GetNearestPoint(const vtkVector2f& ,
+int vtkMyPlotParallelCoordinates::GetNearestPoint(const vtkVector2f& ,
                                   const vtkVector2f& ,
                                   vtkVector2f* )
 {
@@ -202,13 +457,13 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::SetParent(vtkChartParallelCoordinates* parent)
+void vtkMyPlotParallelCoordinates::SetParent(vtkMyChartParallelCoordinates* parent)
 {
   this->Parent = parent;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkPlotParallelCoordinates::SetSelectionRange(int axis, float low,
+bool vtkMyPlotParallelCoordinates::SetSelectionRange(int axis, float low,
                                                    float high)
 {
   if (!this->Selection)
@@ -251,7 +506,7 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkPlotParallelCoordinates::ResetSelectionRange()
+bool vtkMyPlotParallelCoordinates::ResetSelectionRange()
 {
   this->Storage->SelectionInitialized = false;
   if (this->Selection)
@@ -262,10 +517,9 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::SetInput(vtkTable* table)
+void vtkMyPlotParallelCoordinates::SetInput(vtkTable* table)
 {
-  if (table == this->Data->GetInput() && (!table ||
-                                          table->GetMTime() < this->BuildTime))
+  if (table == this->Data->GetInput())
     {
     return;
     }
@@ -287,7 +541,7 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkPlotParallelCoordinates::UpdateTableCache(vtkTable *table)
+bool vtkMyPlotParallelCoordinates::UpdateTableCache(vtkTable *table)
 {
   // Each axis is a column in our storage array, they are scaled from 0.0 to 1.0
   if (!this->Parent || !table || table->GetNumberOfColumns() == 0)
@@ -373,7 +627,7 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkPlotParallelCoordinates::PrintSelf(ostream &os, vtkIndent indent)
+void vtkMyPlotParallelCoordinates::PrintSelf(ostream &os, vtkIndent indent)
 {
   this->Superclass::PrintSelf(os, indent);
 }
