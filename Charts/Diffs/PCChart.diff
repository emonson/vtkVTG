--- /Users/emonson/Programming/VTK_git/VTK/Charts/vtkChartParallelCoordinates.cxx	2012-05-15 09:39:26.000000000 -0400
+++ ./vtkMyChartParallelCoordinates.cxx	2011-03-14 09:08:29.000000000 -0400
@@ -1,7 +1,7 @@
 /*=========================================================================
 
   Program:   Visualization Toolkit
-  Module:    vtkChartParallelCoordinates.cxx
+  Module:    vtkMyChartParallelCoordinates.cxx
 
   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
   All rights reserved.
@@ -13,7 +13,8 @@
 
 =========================================================================*/
 
-#include "vtkChartParallelCoordinates.h"
+#include "vtkMyChartParallelCoordinates.h"
+#include "vtkMyPlotParallelCoordinates.h"
 
 #include "vtkContext2D.h"
 #include "vtkBrush.h"
@@ -22,7 +23,7 @@
 #include "vtkContextMouseEvent.h"
 #include "vtkTextProperty.h"
 #include "vtkAxis.h"
-#include "vtkPlotParallelCoordinates.h"
+#include "vtkPCAxis.h"
 #include "vtkContextMapper2D.h"
 #include "vtkSmartPointer.h"
 #include "vtkTable.h"
@@ -36,32 +37,33 @@
 #include "vtkSelectionNode.h"
 #include "vtkStringArray.h"
 
-#include <vector>
-#include <algorithm>
+#include "vtkstd/vector"
+#include "vtkstd/algorithm"
 
 // Minimal storage class for STL containers etc.
-class vtkChartParallelCoordinates::Private
+class vtkMyChartParallelCoordinates::Private
 {
 public:
   Private()
     {
-    this->Plot = vtkSmartPointer<vtkPlotParallelCoordinates>::New();
+    this->Plot = vtkSmartPointer<vtkMyPlotParallelCoordinates>::New();
     this->Transform = vtkSmartPointer<vtkTransform2D>::New();
     this->CurrentAxis = -1;
     this->AxisResize = -1;
     }
   ~Private()
     {
-    for (std::vector<vtkAxis *>::iterator it = this->Axes.begin();
+    for (vtkstd::vector<vtkPCAxis *>::iterator it = this->Axes.begin();
          it != this->Axes.end(); ++it)
       {
       (*it)->Delete();
       }
     }
-  vtkSmartPointer<vtkPlotParallelCoordinates> Plot;
+  vtkSmartPointer<vtkMyPlotParallelCoordinates> Plot;
   vtkSmartPointer<vtkTransform2D> Transform;
-  std::vector<vtkAxis *> Axes;
-  std::vector<vtkVector<float, 2> > AxesSelections;
+  vtkstd::vector<vtkPCAxis *> Axes;
+  vtkstd::vector<vtkVector<float, 2> > AxesSelections;
+  vtkstd::vector<int> ScaleDims;
   int CurrentAxis;
   int AxisResize;
 };
@@ -69,34 +71,49 @@
 //-----------------------------------------------------------------------------
 
 //-----------------------------------------------------------------------------
-vtkStandardNewMacro(vtkChartParallelCoordinates);
+vtkStandardNewMacro(vtkMyChartParallelCoordinates);
 
 //-----------------------------------------------------------------------------
-vtkChartParallelCoordinates::vtkChartParallelCoordinates()
+vtkCxxSetObjectMacro(vtkMyChartParallelCoordinates, HighlightLink, vtkAnnotationLink);
+
+//-----------------------------------------------------------------------------
+vtkMyChartParallelCoordinates::vtkMyChartParallelCoordinates()
 {
-  this->Storage = new vtkChartParallelCoordinates::Private;
+  this->Storage = new vtkMyChartParallelCoordinates::Private;
   this->Storage->Plot->SetParent(this);
   this->GeometryValid = false;
   this->Selection = vtkIdTypeArray::New();
   this->Storage->Plot->SetSelection(this->Selection);
   this->VisibleColumns = vtkStringArray::New();
-
-  // Set up default mouse button assignments for parallel coordinates.
-  this->SetActionToButton(vtkChart::PAN, vtkContextMouseEvent::RIGHT_BUTTON);
-  this->SetActionToButton(vtkChart::SELECT, vtkContextMouseEvent::LEFT_BUTTON);
+  this->DrawSets = false;
+  this->NumPerSet = 1;
+  this->CurrentScale = 0;
+  this->XYcurrentX = 0;
+  this->XYcurrentY = 0;
+  // Link back into chart to highlight selections made in other plots
+  this->HighlightLink = NULL;
+  this->HighlightSelection = vtkIdTypeArray::New();
+  this->Storage->Plot->SetHighlightSelection(this->HighlightSelection);
+  this->Storage->ScaleDims.clear();
 }
 
 //-----------------------------------------------------------------------------
-vtkChartParallelCoordinates::~vtkChartParallelCoordinates()
+vtkMyChartParallelCoordinates::~vtkMyChartParallelCoordinates()
 {
   this->Storage->Plot->SetSelection(NULL);
+  this->Storage->Plot->SetHighlightSelection(NULL);
   delete this->Storage;
   this->Selection->Delete();
+  this->HighlightSelection->Delete();
   this->VisibleColumns->Delete();
+  if (this->HighlightLink)
+    {
+    this->HighlightLink->Delete();
+    }
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::Update()
+void vtkMyChartParallelCoordinates::Update()
 {
   vtkTable* table = this->Storage->Plot->GetData()->GetInput();
   if (!table)
@@ -113,7 +130,7 @@
   if (static_cast<int>(this->Storage->Axes.size()) !=
       this->VisibleColumns->GetNumberOfTuples())
     {
-    for (std::vector<vtkAxis *>::iterator it = this->Storage->Axes.begin();
+    for (vtkstd::vector<vtkPCAxis *>::iterator it = this->Storage->Axes.begin();
          it != this->Storage->Axes.end(); ++it)
       {
       (*it)->Delete();
@@ -123,12 +140,11 @@
 
     for (int i = 0; i < this->VisibleColumns->GetNumberOfTuples(); ++i)
       {
-      vtkAxis* axis = vtkAxis::New();
-      axis->SetPosition(vtkAxis::PARALLEL);
+      vtkPCAxis* axis = vtkPCAxis::New();
+      axis->SetPosition(vtkPCAxis::PARALLEL);
       this->Storage->Axes.push_back(axis);
       }
-    this->Storage->AxesSelections.resize(this->Storage->Axes.size(),
-                                         vtkVector2f(0, 0));
+      this->Storage->AxesSelections.resize(this->Storage->Axes.size());
     }
 
   // Now set up their ranges and locations
@@ -141,13 +157,13 @@
       {
       array->GetRange(range);
       }
-    vtkAxis* axis = this->Storage->Axes[i];
+    vtkPCAxis* axis = this->Storage->Axes[i];
     if (axis->GetBehavior() == 0)
       {
       axis->SetMinimum(range[0]);
       axis->SetMaximum(range[1]);
+      axis->SetTitle(this->VisibleColumns->GetValue(i));
       }
-    axis->SetTitle(this->VisibleColumns->GetValue(i));
     }
 
   this->GeometryValid = false;
@@ -155,7 +171,7 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::Paint(vtkContext2D *painter)
+bool vtkMyChartParallelCoordinates::Paint(vtkContext2D *painter)
 {
   if (this->GetScene()->GetViewWidth() == 0 ||
       this->GetScene()->GetViewHeight() == 0 ||
@@ -171,11 +187,12 @@
 
   // Handle selections
   vtkIdTypeArray *idArray = 0;
+  unsigned long plotMTime = this->Storage->Plot->GetMTime();
   if (this->AnnotationLink)
     {
     vtkSelection *selection = this->AnnotationLink->GetCurrentSelection();
     if (selection->GetNumberOfNodes() &&
-        this->AnnotationLink->GetMTime() > this->Storage->Plot->GetMTime())
+        this->AnnotationLink->GetMTime() > plotMTime)
       {
       vtkSelectionNode *node = selection->GetNode(0);
       idArray = vtkIdTypeArray::SafeDownCast(node->GetSelectionList());
@@ -187,25 +204,146 @@
     vtkDebugMacro("No annotation link set.");
     }
 
+  // Handle highlight selections back into this chart
+  idArray = 0;
+  if (this->HighlightLink)
+    {
+    vtkSelection *selection = this->HighlightLink->GetCurrentSelection();
+    if (selection->GetNumberOfNodes() &&
+        this->HighlightLink->GetMTime() > plotMTime)
+      {
+      vtkSelectionNode *node = selection->GetNode(0);
+      idArray = vtkIdTypeArray::SafeDownCast(node->GetSelectionList());
+      this->Storage->Plot->SetHighlightSelection(idArray);
+      }
+    }
+  else
+    {
+    vtkDebugMacro("No highlight annotation link set.");
+    }
+
+  // Prepare information on axis indices for drawing boxes (bounds)
+  int num_groups = this->Storage->ScaleDims.size();
+  vtkstd::vector<int> group_starts(num_groups);
+  vtkstd::vector<int> group_ends(num_groups);
+
+  if (num_groups > 0)
+    {
+    group_starts[0] = 0;
+    group_ends[0] = this->Storage->ScaleDims[0] - 1;
+    for (int ii=1; ii < num_groups; ++ii)
+      {
+      group_starts[ii] = group_starts[ii-1] + this->Storage->ScaleDims[ii-1];
+      group_ends[ii] = group_ends[ii-1] + this->Storage->ScaleDims[ii];
+      }
+    }
+
+  // Draw set rectangles if desired
+  if (this->DrawSets)
+    {
+    int oldLineType = painter->GetPen()->GetLineType();
+    
+    // Main sets boxes
+    painter->GetPen()->SetLineType(1);
+    painter->GetPen()->SetColor(0,0,0);
+    painter->GetPen()->SetWidth(1.0);
+    for (int i = 0; i < this->Storage->ScaleDims.size(); ++i)
+      {
+      int idx0 = group_starts.at(i);
+      int idx1 = group_ends.at(i);
+      vtkPCAxis* axis0 = this->Storage->Axes.at(idx0);
+      vtkPCAxis* axis1 = this->Storage->Axes.at(idx1);
+      if (this->Storage->Plot->GetScalarVisibility())
+        {
+        // Use gray box background for colored lines
+        painter->GetBrush()->SetColor(150, 150, 150, 20);
+        }
+      else
+        {
+        // yellow-gold otherwise
+        painter->GetBrush()->SetColor(254, 209, 0, 20);
+        }
+      painter->DrawRect(axis0->GetPoint1()[0],
+                        this->Point1[1],
+                        axis1->GetPoint1()[0]-axis0->GetPoint1()[0],
+                        this->Point2[1]-this->Point1[1]);
+      // Extra set box for current scale
+      if (i == this->CurrentScale)
+        {
+        if (this->Storage->Plot->GetScalarVisibility())
+          {
+          // Use gray box background for colored lines
+          painter->GetBrush()->SetColor(150, 150, 150, 60);
+          }
+        else
+          {
+          // yellow-gold otherwise
+          painter->GetBrush()->SetColor(254, 209, 0, 60);
+          }
+        painter->DrawRect(axis0->GetPoint1()[0], 
+                          this->Point1[1],
+                          axis1->GetPoint1()[0]-axis0->GetPoint1()[0], 
+                          this->Point2[1]-this->Point1[1]);
+        // And annotation for externally plotted X and Y axes
+        if ((this->XYcurrentX >= 0) && (this->XYcurrentY >= 0))
+					{
+					vtkPCAxis* axisX = this->Storage->Axes.at(idx0+this->XYcurrentX);
+					vtkPCAxis* axisY = this->Storage->Axes.at(idx0+this->XYcurrentY);
+					painter->GetBrush()->SetColor(200, 200, 200, 100);
+					
+					painter->DrawLine(axisX->GetPoint1()[0]-3, 
+														this->Point2[1]+6,
+														axisX->GetPoint1()[0]+3,
+														this->Point2[1]+6);
+					painter->DrawEllipse(axisX->GetPoint1()[0], 
+														this->Point2[1]+6,
+														3,3);
+					
+					painter->DrawLine(axisY->GetPoint1()[0], 
+														this->Point2[1]+3,
+														axisY->GetPoint1()[0],
+														this->Point2[1]+9);
+					painter->DrawEllipse(axisY->GetPoint1()[0], 
+														this->Point2[1]+6,
+														3,3);
+          }
+        }
+      }
+    painter->GetPen()->SetLineType(oldLineType);
+    }
+    
+	// Paint axes, but only if there are not too many of them
+	if (this->Storage->Axes.size() < 60)
+	  {
+	  for (vtkstd::vector<vtkPCAxis *>::iterator it = this->Storage->Axes.begin();
+				 it != this->Storage->Axes.end(); ++it)
+			{
+			(*it)->Paint(painter);
+			}
+    }
+	else
+	  {
+	  for (vtkstd::vector<vtkPCAxis *>::iterator it = this->Storage->Axes.begin();
+				 it != this->Storage->Axes.end(); ++it)
+			{
+			(*it)->PaintNoLines(painter);
+			}
+    }
+
+  // Paint the actual lines of the plot
   painter->PushMatrix();
   painter->SetTransform(this->Storage->Transform);
   this->Storage->Plot->Paint(painter);
   painter->PopMatrix();
 
-  // Now we have a table, set up the axes accordingly, clear and build.
-  for (std::vector<vtkAxis *>::iterator it = this->Storage->Axes.begin();
-       it != this->Storage->Axes.end(); ++it)
-    {
-    (*it)->Paint(painter);
-    }
-
   // If there is a selected axis, draw the highlight
   if (this->Storage->CurrentAxis >= 0)
     {
-    painter->GetBrush()->SetColor(200, 200, 200, 200);
-    vtkAxis* axis = this->Storage->Axes[this->Storage->CurrentAxis];
-    painter->DrawRect(axis->GetPoint1()[0]-10, this->Point1[1],
-                      20, this->Point2[1]-this->Point1[1]);
+    painter->GetBrush()->SetColor(200, 200, 200, 150);
+    painter->GetPen()->SetLineType(0);
+    vtkPCAxis* axis = this->Storage->Axes[this->Storage->CurrentAxis];
+    painter->DrawRect(axis->GetPoint1()[0]-3, this->Point1[1],
+                      6, this->Point2[1]-this->Point1[1]);
     }
 
   // Now draw our active selections
@@ -215,29 +353,64 @@
     if (range[0] != range[1])
       {
       painter->GetBrush()->SetColor(200, 20, 20, 220);
-      float x = this->Storage->Axes[i]->GetPoint1()[0] - 5;
+      painter->GetPen()->SetLineType(0);
+      float x = this->Storage->Axes[i]->GetPoint1()[0] - 3;
       float y = range[0];
       y *= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
       y += this->Storage->Transform->GetMatrix()->GetElement(1, 2);
       float height = range[1] - range[0];
       height *= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
 
-      painter->DrawRect(x, y, 10, height);
+      painter->DrawRect(x, y, 6, height);
       }
     }
 
+  // Semi-transparent box over non-valid scales
+  if (this->DrawSets && this->CurrentScale < (num_groups-1))
+    {
+    int oldLineType = painter->GetPen()->GetLineType();
+
+    painter->GetBrush()->SetColor(254, 254, 254, 150);
+    painter->GetPen()->SetLineType(0);
+    // painter->GetPen()->SetOpacity(0.0);
+    int opaquePadding = 4;  // extra padding so axes and points themselves are covered
+    int idx0 = group_starts.at(this->CurrentScale+1);
+    int idx1 = group_ends.back();
+    vtkPCAxis* axis0 = this->Storage->Axes.at(idx0);
+    vtkPCAxis* axis1 = this->Storage->Axes.at(idx1);
+    painter->DrawRect(axis0->GetPoint1()[0]-opaquePadding,
+                      this->Point1[1]-opaquePadding,
+                      axis1->GetPoint1()[0]-axis0->GetPoint1()[0]+(2*opaquePadding),
+                      this->Point2[1]-this->Point1[1]+(2*opaquePadding));
+    
+    painter->GetPen()->SetLineType(oldLineType);
+    }
+    
   return true;
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::SetColumnVisibility(const vtkStdString& name,
+void vtkMyChartParallelCoordinates::SetNumberOfScales(int num_scales)
+{
+  this->Storage->ScaleDims.clear();
+  this->Storage->ScaleDims.resize(num_scales);
+}
+
+//-----------------------------------------------------------------------------
+void vtkMyChartParallelCoordinates::SetScaleDim(vtkIdType index, int dim_size)
+{
+  this->Storage->ScaleDims.at(index) = dim_size;
+}
+
+//-----------------------------------------------------------------------------
+void vtkMyChartParallelCoordinates::SetColumnVisibility(const char* name,
                                                       bool visible)
 {
   if (visible)
     {
     for (vtkIdType i = 0; i < this->VisibleColumns->GetNumberOfTuples(); ++i)
       {
-      if (this->VisibleColumns->GetValue(i) == name)
+      if (strcmp(this->VisibleColumns->GetValue(i).c_str(), name) == 0)
         {
         // Already there, nothing more needs to be done
         return;
@@ -253,7 +426,7 @@
     // Remove the value if present
     for (vtkIdType i = 0; i < this->VisibleColumns->GetNumberOfTuples(); ++i)
       {
-      if (this->VisibleColumns->GetValue(i) == name)
+      if (strcmp(this->VisibleColumns->GetValue(i).c_str(), name) == 0)
         {
         // Move all the later elements down by one, and reduce the size
         while (i < this->VisibleColumns->GetNumberOfTuples()-1)
@@ -263,10 +436,6 @@
           }
         this->VisibleColumns->SetNumberOfTuples(
             this->VisibleColumns->GetNumberOfTuples()-1);
-        if (this->Storage->CurrentAxis >= this->VisibleColumns->GetNumberOfTuples())
-          {
-          this->Storage->CurrentAxis = -1;
-          }
         this->Modified();
         this->Update();
         return;
@@ -276,27 +445,25 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::SetColumnVisibilityAll(bool visible)
+void vtkMyChartParallelCoordinates::SetAllColumnsInvisible()
 {
-  // We always need to clear the current visible columns.
+  // Setting all columns invisible so paint won't spit up if it gets new
+  // data that has less columns than chart visible columns
   this->VisibleColumns->SetNumberOfTuples(0);
+  // Also need to reset CurrentAxis so it won't be greater than
+  // number of axes
   this->Storage->CurrentAxis = -1;
-  if (visible)
-    {
-    vtkTable *table = this->GetPlot(0)->GetInput();
-    for (vtkIdType i = 0; i < table->GetNumberOfColumns(); ++i)
-      {
-      this->SetColumnVisibility(table->GetColumnName(i), visible);
-      }
-    }
+  this->Modified();
+  this->Update();
+  return;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::GetColumnVisibility(const vtkStdString& name)
+bool vtkMyChartParallelCoordinates::GetColumnVisibility(const char* name)
 {
   for (vtkIdType i = 0; i < this->VisibleColumns->GetNumberOfTuples(); ++i)
     {
-    if (this->VisibleColumns->GetValue(i) == name)
+    if (strcmp(this->VisibleColumns->GetValue(i).c_str(), name) == 0)
       {
       return true;
       }
@@ -305,30 +472,49 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::SetPlot(vtkPlotParallelCoordinates *plot)
+void vtkMyChartParallelCoordinates::ClearAxesSelections()
 {
-  this->Storage->Plot = plot;
-  this->Storage->Plot->SetParent(this);
+  this->Storage->AxesSelections.clear();
+  this->Storage->AxesSelections.resize(this->Storage->Axes.size());
+  this->Storage->CurrentAxis = -1;
+  this->Scene->SetDirty(true);
+}
+
+//-----------------------------------------------------------------------------
+vtkPlot * vtkMyChartParallelCoordinates::AddPlot(int)
+{
+  return NULL;
 }
 
 //-----------------------------------------------------------------------------
-vtkPlot* vtkChartParallelCoordinates::GetPlot(vtkIdType)
+bool vtkMyChartParallelCoordinates::RemovePlot(vtkIdType)
+{
+  return false;
+}
+
+//-----------------------------------------------------------------------------
+void vtkMyChartParallelCoordinates::ClearPlots()
+{
+}
+
+//-----------------------------------------------------------------------------
+vtkPlot* vtkMyChartParallelCoordinates::GetPlot(vtkIdType)
 {
   return this->Storage->Plot;
 }
 
 //-----------------------------------------------------------------------------
-vtkIdType vtkChartParallelCoordinates::GetNumberOfPlots()
+vtkIdType vtkMyChartParallelCoordinates::GetNumberOfPlots()
 {
   return 1;
 }
 
 //-----------------------------------------------------------------------------
-vtkAxis* vtkChartParallelCoordinates::GetAxis(int index)
+vtkAxis* vtkMyChartParallelCoordinates::GetAxis(int index)
 {
   if (index < this->GetNumberOfAxes())
     {
-    return this->Storage->Axes[index];
+    return vtkAxis::SafeDownCast(this->Storage->Axes[index]);
     }
   else
     {
@@ -337,13 +523,13 @@
 }
 
 //-----------------------------------------------------------------------------
-vtkIdType vtkChartParallelCoordinates::GetNumberOfAxes()
+vtkIdType vtkMyChartParallelCoordinates::GetNumberOfAxes()
 {
   return this->Storage->Axes.size();
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::UpdateGeometry()
+void vtkMyChartParallelCoordinates::UpdateGeometry()
 {
   vtkVector2i geometry(this->GetScene()->GetViewWidth(),
                        this->GetScene()->GetViewHeight());
@@ -353,7 +539,9 @@
     {
     // Take up the entire window right now, this could be made configurable
     this->SetGeometry(geometry.GetData());
-    this->SetBorders(60, 50, 60, 20);
+    // this->SetBorders(60, 20, 20, 50);
+    // New API uses (left, bottom, right, top)
+    this->SetBorders(60, 50, 20, 20);
 
     // Iterate through the axes and set them up to span the chart area.
     int xStep = (this->Point2[0] - this->Point1[0]) /
@@ -362,7 +550,7 @@
 
     for (size_t i = 0; i < this->Storage->Axes.size(); ++i)
       {
-      vtkAxis* axis = this->Storage->Axes[i];
+      vtkPCAxis* axis = this->Storage->Axes[i];
       axis->SetPoint1(x, this->Point1[1]);
       axis->SetPoint2(x, this->Point2[1]);
       if (axis->GetBehavior() == 0)
@@ -381,7 +569,7 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::CalculatePlotTransform()
+void vtkMyChartParallelCoordinates::CalculatePlotTransform()
 {
   // In the case of parallel coordinates everything is plotted in a normalized
   // system, where the range is from 0.0 to 1.0 in the y axis, and in screen
@@ -391,7 +579,7 @@
     return;
     }
 
-  vtkAxis* axis = this->Storage->Axes[0];
+  vtkPCAxis* axis = this->Storage->Axes[0];
   float *min = axis->GetPoint1();
   float *max = axis->GetPoint2();
   float yScale = 1.0f / (max[1] - min[1]);
@@ -403,19 +591,18 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::RecalculateBounds()
+void vtkMyChartParallelCoordinates::RecalculateBounds()
 {
   return;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::Hit(const vtkContextMouseEvent &mouse)
+bool vtkMyChartParallelCoordinates::Hit(const vtkContextMouseEvent &mouse)
 {
-  vtkVector2i pos(mouse.GetScreenPos());
-  if (pos[0] > this->Point1[0] - 10 &&
-      pos[0] < this->Point2[0] + 10 &&
-      pos[1] > this->Point1[1] &&
-      pos[1] < this->Point2[1])
+  if (mouse.ScreenPos[0] > this->Point1[0]-10 &&
+      mouse.ScreenPos[0] < this->Point2[0]+10 &&
+      mouse.ScreenPos[1] > this->Point1[1] &&
+      mouse.ScreenPos[1] < this->Point2[1])
     {
     return true;
     }
@@ -426,15 +613,15 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseEnterEvent(const vtkContextMouseEvent &)
+bool vtkMyChartParallelCoordinates::MouseEnterEvent(const vtkContextMouseEvent &)
 {
   return true;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseMoveEvent(const vtkContextMouseEvent &mouse)
+bool vtkMyChartParallelCoordinates::MouseMoveEvent(const vtkContextMouseEvent &mouse)
 {
-  if (mouse.GetButton() == this->Actions.Select())
+  if (mouse.Button == vtkContextMouseEvent::LEFT_BUTTON)
     {
     // If an axis is selected, then lets try to narrow down a selection...
     if (this->Storage->CurrentAxis >= 0)
@@ -443,7 +630,7 @@
           this->Storage->AxesSelections[this->Storage->CurrentAxis];
 
       // Normalize the coordinates
-      float current = mouse.GetScenePos().Y();
+      float current = mouse.ScenePos.Y();
       current -= this->Storage->Transform->GetMatrix()->GetElement(1, 2);
       current /= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
 
@@ -462,40 +649,20 @@
       }
     this->Scene->SetDirty(true);
     }
-  else if (mouse.GetButton() == this->Actions.Pan())
+  else if (mouse.Button == vtkContextMouseEvent::MIDDLE_BUTTON)
     {
-    vtkAxis* axis = this->Storage->Axes[this->Storage->CurrentAxis];
+    vtkPCAxis* axis = this->Storage->Axes[this->Storage->CurrentAxis];
     if (this->Storage->AxisResize == 0)
       {
       // Move the axis in x
-      float deltaX = mouse.GetScenePos().X() - mouse.GetLastScenePos().X();
-
+      float deltaX = mouse.ScenePos.X() - mouse.LastScenePos.X();
       axis->SetPoint1(axis->GetPoint1()[0]+deltaX, axis->GetPoint1()[1]);
       axis->SetPoint2(axis->GetPoint2()[0]+deltaX, axis->GetPoint2()[1]);
-
-      vtkAxis* leftAxis = this->Storage->CurrentAxis > 0 ?
-        this->Storage->Axes[this->Storage->CurrentAxis-1] :
-        NULL;
-
-      vtkAxis* rightAxis =
-          this->Storage->CurrentAxis < static_cast<int>(this->Storage->Axes.size())-1 ?
-          this->Storage->Axes[this->Storage->CurrentAxis+1] : NULL;
-
-      if (leftAxis && axis->GetPoint1()[0] < leftAxis->GetPoint1()[0])
-        {
-        this->SwapAxes(this->Storage->CurrentAxis,this->Storage->CurrentAxis-1);
-        this->Storage->CurrentAxis--;
-        }
-      else if (rightAxis && axis->GetPoint1()[0] > rightAxis->GetPoint1()[0])
-        {
-        this->SwapAxes(this->Storage->CurrentAxis,this->Storage->CurrentAxis+1);
-        this->Storage->CurrentAxis++;
-        }
       }
     else if (this->Storage->AxisResize == 1)
       {
       // Modify the bottom axis range...
-      float deltaY = mouse.GetScenePos().Y() - mouse.GetLastScenePos().Y();
+      float deltaY = mouse.ScenePos.Y() - mouse.LastScenePos.Y();
       float scale = (axis->GetPoint2()[1]-axis->GetPoint1()[1]) /
                     (axis->GetMaximum() - axis->GetMinimum());
       axis->SetMinimum(axis->GetMinimum() - deltaY/scale);
@@ -516,7 +683,7 @@
     else if (this->Storage->AxisResize == 2)
       {
       // Modify the bottom axis range...
-      float deltaY = mouse.GetScenePos().Y() - mouse.GetLastScenePos().Y();
+      float deltaY = mouse.ScenePos.Y() - mouse.LastScenePos.Y();
       float scale = (axis->GetPoint2()[1]-axis->GetPoint1()[1]) /
                     (axis->GetMaximum() - axis->GetMinimum());
       axis->SetMaximum(axis->GetMaximum() - deltaY/scale);
@@ -540,27 +707,27 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseLeaveEvent(const vtkContextMouseEvent &)
+bool vtkMyChartParallelCoordinates::MouseLeaveEvent(const vtkContextMouseEvent &)
 {
   return true;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseButtonPressEvent(
+bool vtkMyChartParallelCoordinates::MouseButtonPressEvent(
     const vtkContextMouseEvent& mouse)
 {
-  if (mouse.GetButton() == this->Actions.Select())
+  if (mouse.Button == vtkContextMouseEvent::LEFT_BUTTON)
     {
     // Select an axis if we are within range
-    if (mouse.GetScenePos()[1] > this->Point1[1] &&
-        mouse.GetScenePos()[1] < this->Point2[1])
+    if (mouse.ScenePos[1] > this->Point1[1] &&
+        mouse.ScenePos[1] < this->Point2[1])
       {
       // Iterate over the axes, see if we are within 10 pixels of an axis
       for (size_t i = 0; i < this->Storage->Axes.size(); ++i)
         {
-        vtkAxis* axis = this->Storage->Axes[i];
-        if (axis->GetPoint1()[0]-10 < mouse.GetScenePos()[0] &&
-            axis->GetPoint1()[0]+10 > mouse.GetScenePos()[0])
+        vtkPCAxis* axis = this->Storage->Axes[i];
+        if (axis->GetPoint1()[0]-5 < mouse.ScenePos[0] &&
+            axis->GetPoint1()[0]+5 > mouse.ScenePos[0])
           {
           this->Storage->CurrentAxis = static_cast<int>(i);
           vtkVector<float, 2>& range = this->Storage->AxesSelections[i];
@@ -571,7 +738,7 @@
             }
 
           // Transform into normalized coordinates
-          float low = mouse.GetScenePos()[1];
+          float low = mouse.ScenePos[1];
           low -= this->Storage->Transform->GetMatrix()->GetElement(1, 2);
           low /= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
           range[0] = range[1] = low;
@@ -585,25 +752,25 @@
     this->Scene->SetDirty(true);
     return true;
     }
-  else if (mouse.GetButton() == this->Actions.Pan())
+  else if (mouse.Button == vtkContextMouseEvent::MIDDLE_BUTTON)
     {
     // Middle mouse button - move and zoom the axes
     // Iterate over the axes, see if we are within 10 pixels of an axis
     for (size_t i = 0; i < this->Storage->Axes.size(); ++i)
       {
-      vtkAxis* axis = this->Storage->Axes[i];
-      if (axis->GetPoint1()[0]-10 < mouse.GetScenePos()[0] &&
-          axis->GetPoint1()[0]+10 > mouse.GetScenePos()[0])
+      vtkPCAxis* axis = this->Storage->Axes[i];
+      if (axis->GetPoint1()[0]-10 < mouse.ScenePos[0] &&
+          axis->GetPoint1()[0]+10 > mouse.ScenePos[0])
         {
         this->Storage->CurrentAxis = static_cast<int>(i);
-        if (mouse.GetScenePos().Y() > axis->GetPoint1()[1] &&
-            mouse.GetScenePos().Y() < axis->GetPoint1()[1] + 20)
+        if (mouse.ScenePos.Y() > axis->GetPoint1()[1] &&
+            mouse.ScenePos.Y() < axis->GetPoint1()[1] + 20)
           {
           // Resize the bottom of the axis
           this->Storage->AxisResize = 1;
           }
-        else if (mouse.GetScenePos().Y() < axis->GetPoint2()[1] &&
-                 mouse.GetScenePos().Y() > axis->GetPoint2()[1] - 20)
+        else if (mouse.ScenePos.Y() < axis->GetPoint2()[1] &&
+                 mouse.ScenePos.Y() > axis->GetPoint2()[1] - 20)
           {
           // Resize the top of the axis
           this->Storage->AxisResize = 2;
@@ -624,17 +791,17 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseButtonReleaseEvent(
+bool vtkMyChartParallelCoordinates::MouseButtonReleaseEvent(
     const vtkContextMouseEvent& mouse)
 {
-  if (mouse.GetButton() == this->Actions.Select())
+  if (mouse.Button == vtkContextMouseEvent::LEFT_BUTTON)
     {
     if (this->Storage->CurrentAxis >= 0)
       {
       vtkVector<float, 2> &range =
           this->Storage->AxesSelections[this->Storage->CurrentAxis];
 
-      float final = mouse.GetScenePos()[1];
+      float final = mouse.ScenePos[1];
       final -= this->Storage->Transform->GetMatrix()->GetElement(1, 2);
       final /= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
 
@@ -689,7 +856,7 @@
       }
     return true;
     }
-  else if (mouse.GetButton() == this->Actions.Pan())
+  else if (mouse.Button == vtkContextMouseEvent::MIDDLE_BUTTON)
     {
     this->Storage->CurrentAxis = -1;
     this->Storage->AxisResize = -1;
@@ -699,14 +866,14 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseWheelEvent(const vtkContextMouseEvent &,
+bool vtkMyChartParallelCoordinates::MouseWheelEvent(const vtkContextMouseEvent &,
                                                   int)
 {
   return true;
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::ResetSelection()
+void vtkMyChartParallelCoordinates::ResetSelection()
 {
   // This function takes care of resetting the selection of the chart
   // Reset the axes.
@@ -734,29 +901,7 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::PrintSelf(ostream &os, vtkIndent indent)
+void vtkMyChartParallelCoordinates::PrintSelf(ostream &os, vtkIndent indent)
 {
   this->Superclass::PrintSelf(os, indent);
 }
-
-//-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::SwapAxes(int a1, int a2)
-{
-  // only neighboring axes
-  if (abs(a1-a2) != 1)
-    return;
-
-  vtkAxis* axisTmp = this->Storage->Axes[a1];
-  this->Storage->Axes[a1] = this->Storage->Axes[a2];
-  this->Storage->Axes[a2] = axisTmp;
-
-  vtkVector<float, 2> selTmp = this->Storage->AxesSelections[a1];
-  this->Storage->AxesSelections[a1] = this->Storage->AxesSelections[a2];
-  this->Storage->AxesSelections[a2] = selTmp;
-
-  vtkStdString colTmp = this->VisibleColumns->GetValue(a1);
-  this->VisibleColumns->SetValue(a1,this->VisibleColumns->GetValue(a2));
-  this->VisibleColumns->SetValue(a2,colTmp);
-
-  this->Storage->Plot->Update();
-}
