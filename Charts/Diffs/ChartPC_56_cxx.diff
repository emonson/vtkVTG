--- /Users/emonson/Programming/VTK_5.6/Charts/vtkChartParallelCoordinates.cxx	2010-03-11 16:01:03.000000000 -0500
+++ vtkMyChartParallelCoordinates.cxx	2010-08-09 09:54:43.000000000 -0400
@@ -1,7 +1,7 @@
 /*=========================================================================
 
   Program:   Visualization Toolkit
-  Module:    $RCSfile: vtkChartParallelCoordinates.cxx,v $
+  Module:    vtkMyChartParallelCoordinates.cxx
 
   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
   All rights reserved.
@@ -13,15 +13,16 @@
 
 =========================================================================*/
 
-#include "vtkChartParallelCoordinates.h"
+#include "vtkMyChartParallelCoordinates.h"
+#include "vtkMyPlotParallelCoordinates.h"
 
 #include "vtkContext2D.h"
 #include "vtkBrush.h"
 #include "vtkPen.h"
 #include "vtkContextScene.h"
+#include "vtkContextMouseEvent.h"
 #include "vtkTextProperty.h"
 #include "vtkAxis.h"
-#include "vtkPlotParallelCoordinates.h"
 #include "vtkContextMapper2D.h"
 #include "vtkSmartPointer.h"
 #include "vtkTable.h"
@@ -29,19 +30,25 @@
 #include "vtkIdTypeArray.h"
 #include "vtkTransform2D.h"
 #include "vtkObjectFactory.h"
+#include "vtkCommand.h"
+#include "vtkAnnotationLink.h"
+#include "vtkSelection.h"
+#include "vtkSelectionNode.h"
+#include "vtkStringArray.h"
 
 #include "vtkstd/vector"
 #include "vtkstd/algorithm"
 
 // Minimal storage class for STL containers etc.
-class vtkChartParallelCoordinates::Private
+class vtkMyChartParallelCoordinates::Private
 {
 public:
   Private()
     {
-    this->Plot = vtkSmartPointer<vtkPlotParallelCoordinates>::New();
+    this->Plot = vtkSmartPointer<vtkMyPlotParallelCoordinates>::New();
     this->Transform = vtkSmartPointer<vtkTransform2D>::New();
     this->CurrentAxis = -1;
+    this->AxisResize = -1;
     }
   ~Private()
     {
@@ -51,39 +58,57 @@
       (*it)->Delete();
       }
     }
-  vtkSmartPointer<vtkPlotParallelCoordinates> Plot;
+  vtkSmartPointer<vtkMyPlotParallelCoordinates> Plot;
   vtkSmartPointer<vtkTransform2D> Transform;
   vtkstd::vector<vtkAxis *> Axes;
-  vtkstd::vector<vtkRectf> AxesSelections;
+  vtkstd::vector<vtkVector<float, 2> > AxesSelections;
   int CurrentAxis;
+  int AxisResize;
 };
 
 //-----------------------------------------------------------------------------
-vtkCxxRevisionMacro(vtkChartParallelCoordinates, "$Revision: 1.3 $");
 
 //-----------------------------------------------------------------------------
-vtkStandardNewMacro(vtkChartParallelCoordinates);
+vtkStandardNewMacro(vtkMyChartParallelCoordinates);
 
 //-----------------------------------------------------------------------------
-vtkChartParallelCoordinates::vtkChartParallelCoordinates()
+vtkCxxSetObjectMacro(vtkMyChartParallelCoordinates, HighlightLink, vtkAnnotationLink);
+
+//-----------------------------------------------------------------------------
+vtkMyChartParallelCoordinates::vtkMyChartParallelCoordinates()
 {
-  this->Storage = new vtkChartParallelCoordinates::Private;
+  this->Storage = new vtkMyChartParallelCoordinates::Private;
   this->Storage->Plot->SetParent(this);
   this->GeometryValid = false;
   this->Selection = vtkIdTypeArray::New();
   this->Storage->Plot->SetSelection(this->Selection);
+  this->VisibleColumns = vtkStringArray::New();
+  this->DrawSets = false;
+  this->NumPerSet = 1;
+  this->CurrentScale = 0;
+  // Link back into chart to highlight selections made in other plots
+  this->HighlightLink = NULL;
+  this->HighlightSelection = vtkIdTypeArray::New();
+  this->Storage->Plot->SetHighlightSelection(this->HighlightSelection);
 }
 
 //-----------------------------------------------------------------------------
-vtkChartParallelCoordinates::~vtkChartParallelCoordinates()
+vtkMyChartParallelCoordinates::~vtkMyChartParallelCoordinates()
 {
   this->Storage->Plot->SetSelection(NULL);
+  this->Storage->Plot->SetHighlightSelection(NULL);
   delete this->Storage;
   this->Selection->Delete();
+  this->HighlightSelection->Delete();
+  this->VisibleColumns->Delete();
+  if (this->HighlightLink)
+    {
+    this->HighlightLink->Delete();
+    }
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::Update()
+void vtkMyChartParallelCoordinates::Update()
 {
   vtkTable* table = this->Storage->Plot->GetData()->GetInput();
   if (!table)
@@ -91,46 +116,62 @@
     return;
     }
 
-  if (table->GetMTime() < this->MTime)
+  if (table->GetMTime() < this->BuildTime && this->MTime < this->BuildTime)
   {
     return;
   }
 
   // Now we have a table, set up the axes accordingly, clear and build.
-  for (vtkstd::vector<vtkAxis *>::iterator it = this->Storage->Axes.begin();
-       it != this->Storage->Axes.end(); ++it)
+  if (static_cast<int>(this->Storage->Axes.size()) !=
+      this->VisibleColumns->GetNumberOfTuples())
     {
-    (*it)->Delete();
+    for (vtkstd::vector<vtkAxis *>::iterator it = this->Storage->Axes.begin();
+         it != this->Storage->Axes.end(); ++it)
+      {
+      (*it)->Delete();
+      }
+    this->Storage->Axes.clear();
+
+    for (int i = 0; i < this->VisibleColumns->GetNumberOfTuples(); ++i)
+      {
+      vtkAxis* axis = vtkAxis::New();
+      axis->SetPosition(vtkAxis::PARALLEL);
+      this->Storage->Axes.push_back(axis);
+      }
     }
-  this->Storage->Axes.clear();
 
   // Now set up their ranges and locations
-  for (int i = 0; i < table->GetNumberOfColumns(); ++i)
+  for (int i = 0; i < this->VisibleColumns->GetNumberOfTuples(); ++i)
     {
     double range[2];
-    vtkDataArray* array = vtkDataArray::SafeDownCast(table->GetColumn(i));
+    vtkDataArray* array =
+        vtkDataArray::SafeDownCast(table->GetColumnByName(this->VisibleColumns->GetValue(i)));
     if (array)
       {
       array->GetRange(range);
       }
-    vtkAxis* axis = vtkAxis::New();
-    axis->SetMinimum(range[0]);
-    axis->SetMaximum(range[1]);
-    this->Storage->Axes.push_back(axis);
+    vtkAxis* axis = this->Storage->Axes[i];
+    if (axis->GetBehavior() == 0)
+      {
+      axis->SetMinimum(range[0]);
+      axis->SetMaximum(range[1]);
+      axis->SetTitle(this->VisibleColumns->GetValue(i));
+      }
     }
   this->Storage->AxesSelections.clear();
 
   this->Storage->AxesSelections.resize(this->Storage->Axes.size());
-  this->Storage->Plot->Update();
-  this->Modified();
+  this->GeometryValid = false;
+  this->BuildTime.Modified();
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::Paint(vtkContext2D *painter)
+bool vtkMyChartParallelCoordinates::Paint(vtkContext2D *painter)
 {
   if (this->GetScene()->GetViewWidth() == 0 ||
       this->GetScene()->GetViewHeight() == 0 ||
-      !this->Visible || !this->Storage->Plot->GetVisible())
+      !this->Visible || !this->Storage->Plot->GetVisible() ||
+      this->VisibleColumns->GetNumberOfTuples() < 2)
     {
     // The geometry of the chart must be valid before anything can be drawn
     return false;
@@ -139,6 +180,85 @@
   this->Update();
   this->UpdateGeometry();
 
+  // Handle selections
+  vtkIdTypeArray *idArray = 0;
+  unsigned long plotMTime = this->Storage->Plot->GetMTime();
+  if (this->AnnotationLink)
+    {
+    vtkSelection *selection = this->AnnotationLink->GetCurrentSelection();
+    if (selection->GetNumberOfNodes() &&
+        this->AnnotationLink->GetMTime() > plotMTime)
+      {
+      vtkSelectionNode *node = selection->GetNode(0);
+      idArray = vtkIdTypeArray::SafeDownCast(node->GetSelectionList());
+      this->Storage->Plot->SetSelection(idArray);
+      }
+    }
+  else
+    {
+    vtkDebugMacro("No annotation link set.");
+    }
+
+  // Handle highlight selections back into this chart
+  idArray = 0;
+  if (this->HighlightLink)
+    {
+    vtkSelection *selection = this->HighlightLink->GetCurrentSelection();
+    if (selection->GetNumberOfNodes() &&
+        this->HighlightLink->GetMTime() > plotMTime)
+      {
+      vtkSelectionNode *node = selection->GetNode(0);
+      idArray = vtkIdTypeArray::SafeDownCast(node->GetSelectionList());
+      this->Storage->Plot->SetHighlightSelection(idArray);
+      }
+    }
+  else
+    {
+    vtkDebugMacro("No highlight annotation link set.");
+    }
+
+  // Draw set rectangles if desired
+  if (this->DrawSets)
+    {
+    int oldLineType = painter->GetPen()->GetLineType();
+    
+    // Main sets boxes
+    painter->GetBrush()->SetColor(254, 209, 0, 40);
+    painter->GetPen()->SetLineType(0);
+    for (int i = 0; i < this->VisibleColumns->GetNumberOfTuples(); i+=this->NumPerSet)
+      {
+      if ((i+this->NumPerSet-1) <= static_cast<int>(this->Storage->Axes.size()))
+        {
+        vtkAxis* axis0 = this->Storage->Axes[i];
+        vtkAxis* axis1 = this->Storage->Axes[i+this->NumPerSet-1];
+        painter->DrawRect(axis0->GetPoint1()[0], 
+                          this->Point1[1],
+                          axis1->GetPoint1()[0]-axis0->GetPoint1()[0], 
+                          this->Point2[1]-this->Point1[1]);
+        }
+      }
+    
+    // Extra set box for current scale
+    painter->GetBrush()->SetColor(254, 209, 0, 100);
+    painter->GetPen()->SetLineType(0);
+    for (int i = 0; i < this->VisibleColumns->GetNumberOfTuples(); i+=this->NumPerSet)
+      {
+      if ((i+this->NumPerSet-1) <= static_cast<int>(this->Storage->Axes.size()) &&
+          (i/this->NumPerSet == this->CurrentScale))
+        {
+        vtkAxis* axis0 = this->Storage->Axes[i];
+        vtkAxis* axis1 = this->Storage->Axes[i+this->NumPerSet-1];
+        painter->DrawRect(axis0->GetPoint1()[0], 
+                          this->Point1[1],
+                          axis1->GetPoint1()[0]-axis0->GetPoint1()[0], 
+                          this->Point2[1]-this->Point1[1]);
+        }
+      }
+        
+    painter->GetPen()->SetLineType(oldLineType);
+    }
+    
+  // Paint the actual lines of the plot
   painter->PushMatrix();
   painter->SetTransform(this->Storage->Transform);
   this->Storage->Plot->Paint(painter);
@@ -154,57 +274,145 @@
   // If there is a selected axis, draw the highlight
   if (this->Storage->CurrentAxis >= 0)
     {
-    painter->GetBrush()->SetColor(200, 200, 200, 200);
+    painter->GetBrush()->SetColor(200, 200, 200, 150);
     vtkAxis* axis = this->Storage->Axes[this->Storage->CurrentAxis];
-    painter->DrawRect(axis->GetPoint1()[0]-10, this->Point1[1],
-                      20, this->Point2[1]-this->Point1[1]);
+    painter->DrawRect(axis->GetPoint1()[0]-5, this->Point1[1],
+                      10, this->Point2[1]-this->Point1[1]);
     }
 
   // Now draw our active selections
   for (size_t i = 0; i < this->Storage->AxesSelections.size(); ++i)
     {
-    vtkRectf &rect = this->Storage->AxesSelections[i];
-    if (rect.Height() != 0.0f)
+    vtkVector<float, 2> &range = this->Storage->AxesSelections[i];
+    if (range[0] != range[1])
       {
       painter->GetBrush()->SetColor(200, 20, 20, 220);
-      painter->DrawRect(rect.X(), rect.Y(), rect.Width(), rect.Height());
+      float x = this->Storage->Axes[i]->GetPoint1()[0] - 3;
+      float y = range[0];
+      y *= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
+      y += this->Storage->Transform->GetMatrix()->GetElement(1, 2);
+      float height = range[1] - range[0];
+      height *= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
+
+      painter->DrawRect(x, y, 6, height);
       }
     }
 
+  // Semi-transparent box over non-valid scales
+  if (this->DrawSets)
+    {
+    int oldLineType = painter->GetPen()->GetLineType();
+
+    painter->GetBrush()->SetColor(254, 254, 254, 150);
+    painter->GetPen()->SetLineType(0);
+    int opaquePadding = 4; 	// extra padding so axes and points themselves are covered
+    for (int i = 0; i < this->VisibleColumns->GetNumberOfTuples(); i+=this->NumPerSet)
+      {
+      if ((i+this->NumPerSet-1) <= static_cast<int>(this->Storage->Axes.size()) &&
+          (i/this->NumPerSet == this->CurrentScale+1))	// opaque on next scale
+          // (i/this->NumPerSet == this->CurrentScale+2))	// keep next scale visible
+        {
+        vtkAxis* axis0 = this->Storage->Axes[i];
+        vtkAxis* axis1 = this->Storage->Axes[this->Storage->Axes.size()-1];
+        painter->DrawRect(axis0->GetPoint1()[0]-opaquePadding, 
+                          this->Point1[1]-opaquePadding,
+                          axis1->GetPoint1()[0]-axis0->GetPoint1()[0]+(2*opaquePadding),
+                          this->Point2[1]-this->Point1[1]+(2*opaquePadding));
+        }
+      }
+    
+    painter->GetPen()->SetLineType(oldLineType);
+    }
+    
   return true;
 }
 
 //-----------------------------------------------------------------------------
-vtkPlot * vtkChartParallelCoordinates::AddPlot(int)
+void vtkMyChartParallelCoordinates::SetColumnVisibility(const char* name,
+                                                      bool visible)
+{
+  if (visible)
+    {
+    for (vtkIdType i = 0; i < this->VisibleColumns->GetNumberOfTuples(); ++i)
+      {
+      if (strcmp(this->VisibleColumns->GetValue(i).c_str(), name) == 0)
+        {
+        // Already there, nothing more needs to be done
+        return;
+        }
+      }
+    // Add the column to the end of the list
+    this->VisibleColumns->InsertNextValue(name);
+    this->Modified();
+    this->Update();
+    }
+  else
+    {
+    // Remove the value if present
+    for (vtkIdType i = 0; i < this->VisibleColumns->GetNumberOfTuples(); ++i)
+      {
+      if (strcmp(this->VisibleColumns->GetValue(i).c_str(), name) == 0)
+        {
+        // Move all the later elements down by one, and reduce the size
+        while (i < this->VisibleColumns->GetNumberOfTuples()-1)
+          {
+          this->VisibleColumns->SetValue(i, this->VisibleColumns->GetValue(i+1));
+          ++i;
+          }
+        this->VisibleColumns->SetNumberOfTuples(
+            this->VisibleColumns->GetNumberOfTuples()-1);
+        this->Modified();
+        this->Update();
+        return;
+        }
+      }
+    }
+}
+
+//-----------------------------------------------------------------------------
+bool vtkMyChartParallelCoordinates::GetColumnVisibility(const char* name)
+{
+  for (vtkIdType i = 0; i < this->VisibleColumns->GetNumberOfTuples(); ++i)
+    {
+    if (strcmp(this->VisibleColumns->GetValue(i).c_str(), name) == 0)
+      {
+      return true;
+      }
+    }
+  return false;
+}
+
+//-----------------------------------------------------------------------------
+vtkPlot * vtkMyChartParallelCoordinates::AddPlot(int)
 {
   return NULL;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::RemovePlot(vtkIdType)
+bool vtkMyChartParallelCoordinates::RemovePlot(vtkIdType)
 {
   return false;
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::ClearPlots()
+void vtkMyChartParallelCoordinates::ClearPlots()
 {
 }
 
 //-----------------------------------------------------------------------------
-vtkPlot* vtkChartParallelCoordinates::GetPlot(vtkIdType)
+vtkPlot* vtkMyChartParallelCoordinates::GetPlot(vtkIdType)
 {
   return this->Storage->Plot;
 }
 
 //-----------------------------------------------------------------------------
-vtkIdType vtkChartParallelCoordinates::GetNumberOfPlots()
+vtkIdType vtkMyChartParallelCoordinates::GetNumberOfPlots()
 {
   return 1;
 }
 
 //-----------------------------------------------------------------------------
-vtkAxis* vtkChartParallelCoordinates::GetAxis(int index)
+vtkAxis* vtkMyChartParallelCoordinates::GetAxis(int index)
 {
   if (index < this->GetNumberOfAxes())
     {
@@ -217,22 +425,22 @@
 }
 
 //-----------------------------------------------------------------------------
-vtkIdType vtkChartParallelCoordinates::GetNumberOfAxes()
+vtkIdType vtkMyChartParallelCoordinates::GetNumberOfAxes()
 {
   return this->Storage->Axes.size();
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::UpdateGeometry()
+void vtkMyChartParallelCoordinates::UpdateGeometry()
 {
-  int geometry[] = { this->GetScene()->GetViewWidth(),
-                     this->GetScene()->GetViewHeight() };
+  vtkVector2i geometry(this->GetScene()->GetViewWidth(),
+                       this->GetScene()->GetViewHeight());
 
-  if (geometry[0] != this->Geometry[0] || geometry[1] != this->Geometry[1] ||
+  if (geometry.X() != this->Geometry[0] || geometry.Y() != this->Geometry[1] ||
       !this->GeometryValid)
     {
     // Take up the entire window right now, this could be made configurable
-    this->SetGeometry(geometry);
+    this->SetGeometry(geometry.GetData());
     this->SetBorders(60, 20, 20, 50);
 
     // Iterate through the axes and set them up to span the chart area.
@@ -245,7 +453,10 @@
       vtkAxis* axis = this->Storage->Axes[i];
       axis->SetPoint1(x, this->Point1[1]);
       axis->SetPoint2(x, this->Point2[1]);
-      axis->AutoScale();
+      if (axis->GetBehavior() == 0)
+        {
+        axis->AutoScale();
+        }
       axis->Update();
       x += xStep;
       }
@@ -253,11 +464,12 @@
     this->GeometryValid = true;
     // Cause the plot transform to be recalculated if necessary
     this->CalculatePlotTransform();
+    this->Storage->Plot->Update();
     }
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::CalculatePlotTransform()
+void vtkMyChartParallelCoordinates::CalculatePlotTransform()
 {
   // In the case of parallel coordinates everything is plotted in a normalized
   // system, where the range is from 0.0 to 1.0 in the y axis, and in screen
@@ -279,13 +491,13 @@
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::RecalculateBounds()
+void vtkMyChartParallelCoordinates::RecalculateBounds()
 {
   return;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::Hit(const vtkContextMouseEvent &mouse)
+bool vtkMyChartParallelCoordinates::Hit(const vtkContextMouseEvent &mouse)
 {
   if (mouse.ScreenPos[0] > this->Point1[0]-10 &&
       mouse.ScreenPos[0] < this->Point2[0]+10 &&
@@ -301,59 +513,110 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseEnterEvent(const vtkContextMouseEvent &)
+bool vtkMyChartParallelCoordinates::MouseEnterEvent(const vtkContextMouseEvent &)
 {
   return true;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseMoveEvent(const vtkContextMouseEvent &mouse)
+bool vtkMyChartParallelCoordinates::MouseMoveEvent(const vtkContextMouseEvent &mouse)
 {
-  if (mouse.Button == 0)
+  if (mouse.Button == vtkContextMouseEvent::LEFT_BUTTON)
     {
     // If an axis is selected, then lets try to narrow down a selection...
     if (this->Storage->CurrentAxis >= 0)
       {
-      vtkAxis* axis = this->Storage->Axes[this->Storage->CurrentAxis];
-      vtkRectf &rect = this->Storage->AxesSelections[this->Storage->CurrentAxis];
-      if (mouse.ScenePos[1] > axis->GetPoint2()[1])
+      vtkVector<float, 2> &range =
+          this->Storage->AxesSelections[this->Storage->CurrentAxis];
+
+      // Normalize the coordinates
+      float current = mouse.ScenePos.Y();
+      current -= this->Storage->Transform->GetMatrix()->GetElement(1, 2);
+      current /= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
+
+      if (current > 1.0f)
         {
-        rect.SetHeight(axis->GetPoint2()[1] - rect.Y());
+        range[1] = 1.0f;
         }
-      else if (mouse.ScenePos[1] < axis->GetPoint1()[1])
+      else if (current < 0.0f)
         {
-        rect.SetHeight(axis->GetPoint1()[1] - rect.Y());
+        range[1] = 0.0f;
         }
       else
         {
-        rect.SetHeight(mouse.ScenePos[1] - rect.Y());
+        range[1] = current;
         }
       }
     this->Scene->SetDirty(true);
-
-    }
-  else if (mouse.Button == 2)
-    {
     }
-  else if (mouse.Button < 0)
+  else if (mouse.Button == vtkContextMouseEvent::MIDDLE_BUTTON)
     {
+    vtkAxis* axis = this->Storage->Axes[this->Storage->CurrentAxis];
+    if (this->Storage->AxisResize == 0)
+      {
+      // Move the axis in x
+      float deltaX = mouse.ScenePos.X() - mouse.LastScenePos.X();
+      axis->SetPoint1(axis->GetPoint1()[0]+deltaX, axis->GetPoint1()[1]);
+      axis->SetPoint2(axis->GetPoint2()[0]+deltaX, axis->GetPoint2()[1]);
+      }
+    else if (this->Storage->AxisResize == 1)
+      {
+      // Modify the bottom axis range...
+      float deltaY = mouse.ScenePos.Y() - mouse.LastScenePos.Y();
+      float scale = (axis->GetPoint2()[1]-axis->GetPoint1()[1]) /
+                    (axis->GetMaximum() - axis->GetMinimum());
+      axis->SetMinimum(axis->GetMinimum() - deltaY/scale);
+      // If there is an active selection on the axis, remove it
+      vtkVector<float, 2>& range =
+          this->Storage->AxesSelections[this->Storage->CurrentAxis];
+      if (range[0] != range[1])
+        {
+        range[0] = range[1] = 0.0f;
+        this->ResetSelection();
+        }
+
+      // Now update everything that needs to be
+      axis->Update();
+      axis->RecalculateTickSpacing();
+      this->Storage->Plot->Update();
+      }
+    else if (this->Storage->AxisResize == 2)
+      {
+      // Modify the bottom axis range...
+      float deltaY = mouse.ScenePos.Y() - mouse.LastScenePos.Y();
+      float scale = (axis->GetPoint2()[1]-axis->GetPoint1()[1]) /
+                    (axis->GetMaximum() - axis->GetMinimum());
+      axis->SetMaximum(axis->GetMaximum() - deltaY/scale);
+      // If there is an active selection on the axis, remove it
+      vtkVector<float, 2>& range =
+          this->Storage->AxesSelections[this->Storage->CurrentAxis];
+      if (range[0] != range[1])
+        {
+        range[0] = range[1] = 0.0f;
+        this->ResetSelection();
+        }
 
+      axis->Update();
+      axis->RecalculateTickSpacing();
+      this->Storage->Plot->Update();
+      }
+    this->Scene->SetDirty(true);
     }
 
   return true;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseLeaveEvent(const vtkContextMouseEvent &)
+bool vtkMyChartParallelCoordinates::MouseLeaveEvent(const vtkContextMouseEvent &)
 {
   return true;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseButtonPressEvent(const vtkContextMouseEvent
-                                                        &mouse)
+bool vtkMyChartParallelCoordinates::MouseButtonPressEvent(
+    const vtkContextMouseEvent& mouse)
 {
-  if (mouse.Button == 0)
+  if (mouse.Button == vtkContextMouseEvent::LEFT_BUTTON)
     {
     // Select an axis if we are within range
     if (mouse.ScenePos[1] > this->Point1[1] &&
@@ -363,27 +626,62 @@
       for (size_t i = 0; i < this->Storage->Axes.size(); ++i)
         {
         vtkAxis* axis = this->Storage->Axes[i];
-        if (axis->GetPoint1()[0]-10 < mouse.ScenePos[0] &&
-            axis->GetPoint1()[0]+10 > mouse.ScenePos[0])
+        if (axis->GetPoint1()[0]-5 < mouse.ScenePos[0] &&
+            axis->GetPoint1()[0]+5 > mouse.ScenePos[0])
           {
           this->Storage->CurrentAxis = static_cast<int>(i);
+          vtkVector<float, 2>& range = this->Storage->AxesSelections[i];
+          if (range[0] != range[1])
+            {
+            range[0] = range[1] = 0.0f;
+            this->ResetSelection();
+            }
+
+          // Transform into normalized coordinates
+          float low = mouse.ScenePos[1];
+          low -= this->Storage->Transform->GetMatrix()->GetElement(1, 2);
+          low /= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
+          range[0] = range[1] = low;
+
           this->Scene->SetDirty(true);
-          this->Storage->AxesSelections[i].Set(axis->GetPoint1()[0]-5,
-                                               mouse.ScenePos[1],
-                                               10, 0);
           return true;
           }
         }
       }
-      this->Storage->CurrentAxis = -1;
-      this->Scene->SetDirty(true);
-      return false;
+    this->Storage->CurrentAxis = -1;
+    this->Scene->SetDirty(true);
     return true;
     }
-  else if (mouse.Button == 2)
+  else if (mouse.Button == vtkContextMouseEvent::MIDDLE_BUTTON)
     {
-    // Right mouse button - zoom box
-
+    // Middle mouse button - move and zoom the axes
+    // Iterate over the axes, see if we are within 10 pixels of an axis
+    for (size_t i = 0; i < this->Storage->Axes.size(); ++i)
+      {
+      vtkAxis* axis = this->Storage->Axes[i];
+      if (axis->GetPoint1()[0]-10 < mouse.ScenePos[0] &&
+          axis->GetPoint1()[0]+10 > mouse.ScenePos[0])
+        {
+        this->Storage->CurrentAxis = static_cast<int>(i);
+        if (mouse.ScenePos.Y() > axis->GetPoint1()[1] &&
+            mouse.ScenePos.Y() < axis->GetPoint1()[1] + 20)
+          {
+          // Resize the bottom of the axis
+          this->Storage->AxisResize = 1;
+          }
+        else if (mouse.ScenePos.Y() < axis->GetPoint2()[1] &&
+                 mouse.ScenePos.Y() > axis->GetPoint2()[1] - 20)
+          {
+          // Resize the top of the axis
+          this->Storage->AxisResize = 2;
+          }
+        else
+          {
+          // Move the axis
+          this->Storage->AxisResize = 0;
+          }
+        }
+      }
     return true;
     }
   else
@@ -393,102 +691,117 @@
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseButtonReleaseEvent(const vtkContextMouseEvent
-                                                          &mouse)
+bool vtkMyChartParallelCoordinates::MouseButtonReleaseEvent(
+    const vtkContextMouseEvent& mouse)
 {
-  if (mouse.Button == 0)
+  if (mouse.Button == vtkContextMouseEvent::LEFT_BUTTON)
     {
     if (this->Storage->CurrentAxis >= 0)
       {
-      vtkAxis* axis = this->Storage->Axes[this->Storage->CurrentAxis];
-      vtkRectf &rect = this->Storage->AxesSelections[this->Storage->CurrentAxis];
+      vtkVector<float, 2> &range =
+          this->Storage->AxesSelections[this->Storage->CurrentAxis];
+
+      float final = mouse.ScenePos[1];
+      final -= this->Storage->Transform->GetMatrix()->GetElement(1, 2);
+      final /= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
 
       // Set the final mouse position
-      if (mouse.ScenePos[1] > axis->GetPoint2()[1])
+      if (final > 1.0)
         {
-        rect.SetHeight(axis->GetPoint2()[1] - rect.Y());
+        range[1] = 1.0;
         }
-      else if (mouse.ScenePos[1] < axis->GetPoint1()[1])
+      else if (final < 0.0)
         {
-        rect.SetHeight(axis->GetPoint1()[1] - rect.Y());
+        range[1] = 0.0;
         }
       else
         {
-        rect.SetHeight(mouse.ScenePos[1] - rect.Y());
+        range[1] = final;
         }
 
-      if (rect.Height() == 0.0f)
+      if (range[0] == range[1])
         {
-        // Reset the axes.
-        this->Storage->Plot->ResetSelectionRange();
-
-        // Now set the remaining selections that were kept
-        float low = 0.0;
-        float high = 0.0;
-        for (size_t i = 0; i < this->Storage->AxesSelections.size(); ++i)
-          {
-          vtkRectf &rect2 = this->Storage->AxesSelections[i];
-          if (rect2.Height() != 0.0f)
-            {
-            if (rect2.Height() > 0.0f)
-              {
-              low = rect2.Y();
-              high = rect2.Y() + rect2.Height();
-              }
-            else
-              {
-              low = rect2.Y() + rect2.Height();
-              high = rect2.Y();
-              }
-            low -= this->Storage->Transform->GetMatrix()->GetElement(1, 2);
-            low /= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
-            high -= this->Storage->Transform->GetMatrix()->GetElement(1, 2);
-            high /= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
-
-            // Process the selected range and display this
-            this->Storage->Plot->SetSelectionRange(static_cast<int>(i),
-                                                   low, high);
-            }
-          }
+        this->ResetSelection();
         }
       else
         {
-        float low = 0.0;
-        float high = 0.0;
-        if (rect.Height() > 0.0f)
+        // Add a new selection
+        if (range[0] < range[1])
           {
-          low = rect.Y();
-          high = rect.Y() + rect.Height();
+          this->Storage->Plot->SetSelectionRange(this->Storage->CurrentAxis,
+                                                 range[0], range[1]);
           }
         else
           {
-          low = rect.Y() + rect.Height();
-          high = rect.Y();
+          this->Storage->Plot->SetSelectionRange(this->Storage->CurrentAxis,
+                                                 range[1], range[0]);
           }
-        low -= this->Storage->Transform->GetMatrix()->GetElement(1, 2);
-        low /= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
-        high -= this->Storage->Transform->GetMatrix()->GetElement(1, 2);
-        high /= this->Storage->Transform->GetMatrix()->GetElement(1, 1);
-        // Process the selected range and display this
-        this->Storage->Plot->SetSelectionRange(this->Storage->CurrentAxis,
-                                               low, high);
         }
 
+      if (this->AnnotationLink)
+        {
+        vtkSelection* selection = vtkSelection::New();
+        vtkSelectionNode* node = vtkSelectionNode::New();
+        selection->AddNode(node);
+        node->SetContentType(vtkSelectionNode::INDICES);
+        node->SetFieldType(vtkSelectionNode::POINT);
+
+        node->SetSelectionList(this->Storage->Plot->GetSelection());
+        this->AnnotationLink->SetCurrentSelection(selection);
+        selection->Delete();
+        node->Delete();
+        }
+      this->InvokeEvent(vtkCommand::SelectionChangedEvent);
       this->Scene->SetDirty(true);
       }
+    return true;
+    }
+  else if (mouse.Button == vtkContextMouseEvent::MIDDLE_BUTTON)
+    {
+    this->Storage->CurrentAxis = -1;
+    this->Storage->AxisResize = -1;
+    return true;
     }
   return false;
 }
 
 //-----------------------------------------------------------------------------
-bool vtkChartParallelCoordinates::MouseWheelEvent(const vtkContextMouseEvent &,
+bool vtkMyChartParallelCoordinates::MouseWheelEvent(const vtkContextMouseEvent &,
                                                   int)
 {
   return true;
 }
 
 //-----------------------------------------------------------------------------
-void vtkChartParallelCoordinates::PrintSelf(ostream &os, vtkIndent indent)
+void vtkMyChartParallelCoordinates::ResetSelection()
+{
+  // This function takes care of resetting the selection of the chart
+  // Reset the axes.
+  this->Storage->Plot->ResetSelectionRange();
+
+  // Now set the remaining selections that were kept
+  for (size_t i = 0; i < this->Storage->AxesSelections.size(); ++i)
+    {
+    vtkVector<float, 2> &range = this->Storage->AxesSelections[i];
+    if (range[0] != range[1])
+      {
+      // Process the selected range and display this
+      if (range[0] < range[1])
+        {
+        this->Storage->Plot->SetSelectionRange(static_cast<int>(i),
+                                               range[0], range[1]);
+        }
+      else
+        {
+        this->Storage->Plot->SetSelectionRange(static_cast<int>(i),
+                                               range[1], range[0]);
+        }
+      }
+    }
+}
+
+//-----------------------------------------------------------------------------
+void vtkMyChartParallelCoordinates::PrintSelf(ostream &os, vtkIndent indent)
 {
   this->Superclass::PrintSelf(os, indent);
 }
